name: Test Fully

on:
  repository_dispatch:
    types:
      # If a new version of the game is released, test the repo against it.
      # This way we will always know if the repo is broken on a new update.
      - game_version_update
  push:
    branches:
      - dev
    paths:
      - '.github/workflows/test-full.yml'
#      - 'src/**'
#      - 'tests/**'
#      - 'build/**'
  pull_request:
    branches:
      - master
    # will be triggereg when undrafting or requesting review
    types: [review_requested, ready_for_review]
    paths:
      - '.github/workflows/test-full.yml'
      - 'src/**'
      - 'tests/**'
      - 'build/**'

env:
  # Disable the .NET logo in the console output.
  DOTNET_NOLOGO: true
  # Disable the .NET first time experience to skip caching NuGet packages and speed up the build.
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending .NET CLI telemetry to Microsoft.
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  TEST_FILTERS: "+[Bannerlord.ButterLib*]* -[Bannerlord.ButterLib*.Tests]* -[*]System.Diagnostics.CodeAnalysis* -[*]BUTR.DependencyInjection* -[*]Bannerlord.BUTR.Shared* -[*]HarmonyLib.BUTR*"

jobs:
  test:
    name: Test Fully
    runs-on: windows-latest
    steps:
    - name: Tests Setup
      uses: butr/actions-tests-setup@v1.5.2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}

    - name: Test
      run: |
        $ErrorActionPreference = "Stop"
        $PSDefaultParameterValues['*:ErrorAction']='Stop'
        
        $testproj = "$PWD/tests/Bannerlord.ButterLib.Tests/Bannerlord.ButterLib.Tests.csproj";
        $testprojimpl = "$PWD/tests/Bannerlord.ButterLib.Implementation.Tests/Bannerlord.ButterLib.Implementation.Tests.csproj";

        $gameversions = Get-Content -Path supported-game-versions.txt;

        For ($i = 0; $i -le $gameversions.Length - 1; $i++)
        {
            $gameversion = $gameversions[$i];
            $gamefolder = "$PWD/bannerlord-$gameversion";

            New-Item -ItemType directory -Force -Path "$gamefolder";

            exec { dotnet depotdownloader/DepotDownloader.dll -app 261550 -depot 261551 -beta $gameversion -filelist "$PWD/.github/resources/FileFilters.regexp" -username "${{secrets.STEAM_LOGIN}}" -password "${{secrets.STEAM_PASSWORD}}" -dir "$gamefolder" }
        }

        exec { opencover/OpenCover.Console.exe -register -target:"dotnet.exe" -targetargs:"test $testproj --configuration Debug  -p:OverrideGameVersion=$($gameversions[-1]) -p:GameFolder=""$PWD/bannerlord-$($gameversions[-1])""" -filter:"${{env.TEST_FILTERS}}" -output:"coverage_butterlib_$($gameversions[-1])_debug.xml" -mergebyhash }
        exec { opencover/OpenCover.Console.exe -register -target:"dotnet.exe" -targetargs:"test $testproj --configuration Release  -p:OverrideGameVersion=$($gameversions[-1]) -p:GameFolder=""$PWD/bannerlord-$($gameversions[-1])""" -filter:"${{env.TEST_FILTERS}}" -output:"coverage_butterlib_$($gameversions[-1])_release.xml" -mergebyhash }
        For ($i = 0; $i -le $gameversions.Length - 1; $i++)
        {
            $gameversion = $gameversions[$i];
            $gamefolder = "$PWD/bannerlord-$gameversion";

            exec { opencover/OpenCover.Console.exe -register -target:"dotnet.exe" -targetargs:"test $testprojimpl --configuration Debug -p:OverrideGameVersion=$gameversion -p:GameFolder=""$gamefolder""" -filter:"${{env.TEST_FILTERS}}" -output:"coverage_butterlib_impl_$($gameversion)_debug.xml" -mergebyhash }
            exec { opencover/OpenCover.Console.exe -register -target:"dotnet.exe" -targetargs:"test $testprojimpl --configuration Release -p:OverrideGameVersion=$gameversion -p:GameFolder=""$gamefolder""" -filter:"${{env.TEST_FILTERS}}" -output:"coverage_butterlib_impl_$($gameversion)_release.xml" -mergebyhash }
        }
      shell: pwsh

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.12
      with:
        reports: '*.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline;Cobertura'
        sourcedirs: './'
        tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.

    - name: Upload ReportGenerator to GitHub
      uses: actions/upload-artifact@v1
      with:
        name: coverage-report
        path: coveragereport

    - name: Upload ReportGenerator to CodeCov
      uses: codecov/codecov-action@v2.1.0
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        file: coveragereport/Cobertura.xml
        fail_ci_if_error: true
