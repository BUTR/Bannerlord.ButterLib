{
  "api/BUTR.CrashReport.Bannerlord.HarmonyProvider.html": {
    "href": "api/BUTR.CrashReport.Bannerlord.HarmonyProvider.html",
    "title": "Class HarmonyProvider | ButterLib Documentation",
    "keywords": "Class HarmonyProvider Namespace BUTR.CrashReport.Bannerlord Assembly Bannerlord.ButterLib.dll public class HarmonyProvider : IHarmonyProvider Inheritance object HarmonyProvider Implements IHarmonyProvider Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetAllPatchedMethods() Returns all patched methods. public virtual IEnumerable<MethodBase> GetAllPatchedMethods() Returns IEnumerable<MethodBase> GetIdentifiable(MethodBase) The runtime can return several different MethodInfo's that point to the same method. Will return the correct one. public MethodBase? GetIdentifiable(MethodBase method) Parameters method MethodBase Returns MethodBase GetMethodFromStackframe(StackFrame) Returns the method from a stackframe. public virtual MethodBase? GetMethodFromStackframe(StackFrame frame) Parameters frame StackFrame Returns MethodBase GetNativeMethodBody(MethodBase) Returns the JIT compiled (native) start address of a method. public IntPtr GetNativeMethodBody(MethodBase method) Parameters method MethodBase Returns IntPtr GetOriginalMethod(MethodInfo) Returns the original method for a given patch method. public virtual MethodBase? GetOriginalMethod(MethodInfo replacement) Parameters replacement MethodInfo The patch method Returns MethodBase GetPatchInfo(MethodBase) Returns the patch information for a given method. public virtual HarmonyPatches? GetPatchInfo(MethodBase originalMethod) Parameters originalMethod MethodBase Returns HarmonyPatches"
  },
  "api/BUTR.CrashReport.Bannerlord.html": {
    "href": "api/BUTR.CrashReport.Bannerlord.html",
    "title": "Namespace BUTR.CrashReport.Bannerlord | ButterLib Documentation",
    "keywords": "Namespace BUTR.CrashReport.Bannerlord Classes HarmonyProvider"
  },
  "api/Bannerlord.BLSE.BLSEExceptionHandlerAttribute.html": {
    "href": "api/Bannerlord.BLSE.BLSEExceptionHandlerAttribute.html",
    "title": "Class BLSEExceptionHandlerAttribute | ButterLib Documentation",
    "keywords": "Class BLSEExceptionHandlerAttribute Namespace Bannerlord.BLSE Assembly Bannerlord.ButterLib.dll [AttributeUsage(AttributeTargets.Class)] public sealed class BLSEExceptionHandlerAttribute : Attribute, _Attribute Inheritance object Attribute BLSEExceptionHandlerAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType()"
  },
  "api/Bannerlord.BLSE.html": {
    "href": "api/Bannerlord.BLSE.html",
    "title": "Namespace Bannerlord.BLSE | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.BLSE Classes BLSEExceptionHandlerAttribute"
  },
  "api/Bannerlord.BUTR.Shared.Utils.MBSubModuleBaseSimpleWrapper.html": {
    "href": "api/Bannerlord.BUTR.Shared.Utils.MBSubModuleBaseSimpleWrapper.html",
    "title": "Class MBSubModuleBaseSimpleWrapper | ButterLib Documentation",
    "keywords": "Class MBSubModuleBaseSimpleWrapper Namespace Bannerlord.BUTR.Shared.Utils Assembly Bannerlord.ButterLib.dll Wraps a MBSubModuleBase so protected methods could be called without a performance hit public class MBSubModuleBaseSimpleWrapper : MBSubModuleBase Inheritance object MBSubModuleBase MBSubModuleBaseSimpleWrapper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<Assembly>) DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<string>?, Action<LoggerConfiguration>?) DependencyInjectionExtensions.GetServiceProvider(MBSubModuleBase) DependencyInjectionExtensions.GetServices(MBSubModuleBase) DependencyInjectionExtensions.GetTempServiceProvider(MBSubModuleBase) Constructors MBSubModuleBaseSimpleWrapper(MBSubModuleBase) public MBSubModuleBaseSimpleWrapper(MBSubModuleBase subModule) Parameters subModule MBSubModuleBase Properties SubModule public MBSubModuleBase SubModule { get; } Property Value MBSubModuleBase Methods AfterAsyncTickTick(float) protected override void AfterAsyncTickTick(float dt) Parameters dt float AfterRegisterSubModuleObjects(bool) public override void AfterRegisterSubModuleObjects(bool isSavedCampaign) Parameters isSavedCampaign bool BeginGameStart(Game) public override void BeginGameStart(Game game) Parameters game Game DoLoading(Game) public override bool DoLoading(Game game) Parameters game Game Returns bool InitializeGameStarter(Game, IGameStarter) protected override void InitializeGameStarter(Game game, IGameStarter starterObject) Parameters game Game starterObject IGameStarter OnAfterGameInitializationFinished(Game, object) public override void OnAfterGameInitializationFinished(Game game, object starterObject) Parameters game Game starterObject object OnApplicationTick(float) protected override void OnApplicationTick(float dt) Parameters dt float OnBeforeInitialModuleScreenSetAsRoot() protected override void OnBeforeInitialModuleScreenSetAsRoot() OnBeforeMissionBehaviorInitialize(Mission) public override void OnBeforeMissionBehaviorInitialize(Mission mission) Parameters mission Mission OnCampaignStart(Game, object) public override void OnCampaignStart(Game game, object starterObject) Parameters game Game starterObject object OnConfigChanged() public override void OnConfigChanged() OnGameEnd(Game) public override void OnGameEnd(Game game) Parameters game Game OnGameInitializationFinished(Game) public override void OnGameInitializationFinished(Game game) Parameters game Game OnGameLoaded(Game, object) public override void OnGameLoaded(Game game, object initializerObject) Parameters game Game initializerObject object OnGameStart(Game, IGameStarter) protected override void OnGameStart(Game game, IGameStarter gameStarterObject) Parameters game Game gameStarterObject IGameStarter OnInitialState() public override void OnInitialState() OnMissionBehaviorInitialize(Mission) public override void OnMissionBehaviorInitialize(Mission mission) Parameters mission Mission OnMultiplayerGameStart(Game, object) public override void OnMultiplayerGameStart(Game game, object starterObject) Parameters game Game starterObject object OnNewGameCreated(Game, object) public override void OnNewGameCreated(Game game, object initializerObject) Parameters game Game initializerObject object OnSubModuleLoad() protected override void OnSubModuleLoad() OnSubModuleUnloaded() protected override void OnSubModuleUnloaded() RegisterSubModuleObjects(bool) public override void RegisterSubModuleObjects(bool isSavedCampaign) Parameters isSavedCampaign bool"
  },
  "api/Bannerlord.BUTR.Shared.Utils.html": {
    "href": "api/Bannerlord.BUTR.Shared.Utils.html",
    "title": "Namespace Bannerlord.BUTR.Shared.Utils | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.BUTR.Shared.Utils Classes MBSubModuleBaseSimpleWrapper Wraps a MBSubModuleBase so protected methods could be called without a performance hit"
  },
  "api/Bannerlord.ButterLib.ButterLibSaveableTypeDefiner.html": {
    "href": "api/Bannerlord.ButterLib.ButterLibSaveableTypeDefiner.html",
    "title": "Class ButterLibSaveableTypeDefiner | ButterLib Documentation",
    "keywords": "Class ButterLibSaveableTypeDefiner Namespace Bannerlord.ButterLib Assembly Bannerlord.ButterLib.dll Base class of ButterLib's saving system. public abstract class ButterLibSaveableTypeDefiner : SaveableTypeDefiner Inheritance object SaveableTypeDefiner ButterLibSaveableTypeDefiner Inherited Members SaveableTypeDefiner.DefineBasicTypes() SaveableTypeDefiner.DefineClassTypes() SaveableTypeDefiner.DefineStructTypes() SaveableTypeDefiner.DefineInterfaceTypes() SaveableTypeDefiner.DefineEnumTypes() SaveableTypeDefiner.DefineRootClassTypes() SaveableTypeDefiner.DefineGenericClassDefinitions() SaveableTypeDefiner.DefineGenericStructDefinitions() SaveableTypeDefiner.DefineContainerDefinitions() SaveableTypeDefiner.ConstructGenericClassDefinition(Type) SaveableTypeDefiner.ConstructGenericStructDefinition(Type) SaveableTypeDefiner.AddBasicTypeDefinition(Type, int, IBasicTypeSerializer) SaveableTypeDefiner.AddClassDefinition(Type, int, IObjectResolver) SaveableTypeDefiner.AddClassDefinitionWithCustomFields(Type, int, IEnumerable<Tuple<string, short>>, IObjectResolver) SaveableTypeDefiner.AddStructDefinitionWithCustomFields(Type, int, IEnumerable<Tuple<string, short>>, IObjectResolver) SaveableTypeDefiner.AddRootClassDefinition(Type, int, IObjectResolver) SaveableTypeDefiner.AddStructDefinition(Type, int, IObjectResolver) SaveableTypeDefiner.AddInterfaceDefinition(Type, int) SaveableTypeDefiner.AddEnumDefinition(Type, int, IEnumResolver) SaveableTypeDefiner.ConstructContainerDefinition(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ButterLibSaveableTypeDefiner(int) protected ButterLibSaveableTypeDefiner(int saveBaseId) Parameters saveBaseId int"
  },
  "api/Bannerlord.ButterLib.ButterLibSubModule.html": {
    "href": "api/Bannerlord.ButterLib.ButterLibSubModule.html",
    "title": "Class ButterLibSubModule | ButterLib Documentation",
    "keywords": "Class ButterLibSubModule Namespace Bannerlord.ButterLib Assembly Bannerlord.ButterLib.dll Main SubModule. Performs initialization of all 3 stages. public sealed class ButterLibSubModule : MBSubModuleBase Inheritance object MBSubModuleBase ButterLibSubModule Inherited Members MBSubModuleBase.OnConfigChanged() MBSubModuleBase.OnGameLoaded(Game, object) MBSubModuleBase.OnNewGameCreated(Game, object) MBSubModuleBase.BeginGameStart(Game) MBSubModuleBase.OnCampaignStart(Game, object) MBSubModuleBase.RegisterSubModuleObjects(bool) MBSubModuleBase.AfterRegisterSubModuleObjects(bool) MBSubModuleBase.OnMultiplayerGameStart(Game, object) MBSubModuleBase.OnGameInitializationFinished(Game) MBSubModuleBase.OnAfterGameInitializationFinished(Game, object) MBSubModuleBase.DoLoading(Game) MBSubModuleBase.OnMissionBehaviorInitialize(Mission) MBSubModuleBase.OnBeforeMissionBehaviorInitialize(Mission) MBSubModuleBase.OnInitialState() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<Assembly>) DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<string>?, Action<LoggerConfiguration>?) DependencyInjectionExtensions.GetServiceProvider(MBSubModuleBase) DependencyInjectionExtensions.GetServices(MBSubModuleBase) DependencyInjectionExtensions.GetTempServiceProvider(MBSubModuleBase) Constructors ButterLibSubModule() public ButterLibSubModule() Properties CanBeConfigured public static bool CanBeConfigured { get; } Property Value bool Instance public static ButterLibSubModule? Instance { get; set; } Property Value ButterLibSubModule Methods ConfigureBeforeInitialization(Action<IServiceCollection>) The only way to inject your stuff before ButterLib will start it's initialization Can be used to inject a custom ButterLibOptions provider, but it needs to load before ButterLib public static void ConfigureBeforeInitialization(Action<IServiceCollection> action) Parameters action Action<IServiceCollection> OnApplicationTick(float) protected override void OnApplicationTick(float dt) Parameters dt float OnBeforeInitialModuleScreenSetAsRoot() protected override void OnBeforeInitialModuleScreenSetAsRoot() OnGameEnd(Game) public override void OnGameEnd(Game game) Parameters game Game OnGameStart(Game, IGameStarter) protected override void OnGameStart(Game game, IGameStarter gameStarterObject) Parameters game Game gameStarterObject IGameStarter OnServiceRegistration() public void OnServiceRegistration() OnSubModuleLoad() protected override void OnSubModuleLoad() OnSubModuleUnloaded() protected override void OnSubModuleUnloaded()"
  },
  "api/Bannerlord.ButterLib.Common.Extensions.ApplicationVersionExtensions.html": {
    "href": "api/Bannerlord.ButterLib.Common.Extensions.ApplicationVersionExtensions.html",
    "title": "Class ApplicationVersionExtensions | ButterLib Documentation",
    "keywords": "Class ApplicationVersionExtensions Namespace Bannerlord.ButterLib.Common.Extensions Assembly Bannerlord.ButterLib.dll An extension class for the ApplicationVersion. public static class ApplicationVersionExtensions Inheritance object ApplicationVersionExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods IsSameWithRevision(ApplicationVersion, ApplicationVersion) Determines whether two source ApplicationVersion structs are equal up to the revisions. public static bool IsSameWithRevision(this ApplicationVersion @this, ApplicationVersion other) Parameters this ApplicationVersion An ApplicationVersion struct to compare to second. other ApplicationVersion An ApplicationVersion struct to compare to the first. Returns bool true if corresponding elements of two source ApplicationVersion structs are equal according to the default equality comparer for their type; otherwise, false. IsSameWithoutRevision(ApplicationVersion, ApplicationVersion) Determines whether two source ApplicationVersion structs are equal, disregarding revisions. public static bool IsSameWithoutRevision(this ApplicationVersion @this, ApplicationVersion other) Parameters this ApplicationVersion An ApplicationVersion struct to compare to second. other ApplicationVersion An ApplicationVersion struct to compare to the first. Returns bool true if corresponding elements of two source ApplicationVersion structs are equal according to the default equality comparer for their type; otherwise, false. Differences in the revisions between two source ApplicationVersion structs do not affect the result."
  },
  "api/Bannerlord.ButterLib.Common.Extensions.CampaignExtensions.html": {
    "href": "api/Bannerlord.ButterLib.Common.Extensions.CampaignExtensions.html",
    "title": "Class CampaignExtensions | ButterLib Documentation",
    "keywords": "Class CampaignExtensions Namespace Bannerlord.ButterLib.Common.Extensions Assembly Bannerlord.ButterLib.dll Helper extension of the Campaign class returning additional information, provided by the ButterLib. public static class CampaignExtensions Inheritance object CampaignExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Contains easy accessible distance matrices for the settlements, clans and kingdoms. Methods GetDefaultClanDistanceMatrix(Campaign) Gets the DistanceMatrix<T> calculated by default for the Clan object type. public static DistanceMatrix<Clan>? GetDefaultClanDistanceMatrix(this Campaign campaign) Parameters campaign Campaign The campaign Returns DistanceMatrix<Clan> Distance matrix for all the active clans of the current campaign, or null if the campaign has not started yet. Remarks Calculation is based on the average distance between clans fiefs weighted by the fief type. GetDefaultKingdomDistanceMatrix(Campaign) Gets the DistanceMatrix<T> calculated by default for the Kingdom object type. public static DistanceMatrix<Kingdom>? GetDefaultKingdomDistanceMatrix(this Campaign campaign) Parameters campaign Campaign The campaign Returns DistanceMatrix<Kingdom> Distance matrix for all the active kingdoms of the current campaign, or null if the campaign has not started yet. Remarks Calculation is based on the average distance between kingdoms fiefs weighted by the fief type. GetDefaultSettlementDistanceMatrix(Campaign) Gets the DistanceMatrix<T> calculated by default for the Settlement object type. public static DistanceMatrix<Settlement>? GetDefaultSettlementDistanceMatrix(this Campaign campaign) Parameters campaign Campaign The campaign Returns DistanceMatrix<Settlement> Distance matrix for all the towns, castles and villages of the current campaign, or null if the campaign has not started yet."
  },
  "api/Bannerlord.ButterLib.Common.Extensions.DependencyInjectionExtensions.html": {
    "href": "api/Bannerlord.ButterLib.Common.Extensions.DependencyInjectionExtensions.html",
    "title": "Class DependencyInjectionExtensions | ButterLib Documentation",
    "keywords": "Class DependencyInjectionExtensions Namespace Bannerlord.ButterLib.Common.Extensions Assembly Bannerlord.ButterLib.dll public static class DependencyInjectionExtensions Inheritance object DependencyInjectionExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<Assembly>) Don't forget to get a new ILogger after adding a new ILoggerProvider public static IServiceCollection AddSerilogLoggerProvider(this MBSubModuleBase subModule, string filename, IEnumerable<Assembly> filter) Parameters subModule MBSubModuleBase filename string filter IEnumerable<Assembly> Returns IServiceCollection AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<string>?, Action<LoggerConfiguration>?) Don't forget to get a new ILogger after adding a new ILoggerProvider public static IServiceCollection AddSerilogLoggerProvider(this MBSubModuleBase subModule, string filename, IEnumerable<string>? filter = null, Action<LoggerConfiguration>? configure = null) Parameters subModule MBSubModuleBase filename string filter IEnumerable<string> configure Action<LoggerConfiguration> Returns IServiceCollection AddSubSystem<TImplementation>(IServiceCollection) public static IServiceCollection AddSubSystem<TImplementation>(this IServiceCollection services) where TImplementation : class, ISubSystem, new() Parameters services IServiceCollection Returns IServiceCollection Type Parameters TImplementation FromSources(IEnumerable<string>) public static Func<LogEvent, bool> FromSources(IEnumerable<string> sources) Parameters sources IEnumerable<string> Returns Func<LogEvent, bool> GetServiceProvider(CampaignBehaviorBase) For Stage 3. public static IServiceProvider? GetServiceProvider(this CampaignBehaviorBase _) Parameters _ CampaignBehaviorBase Returns IServiceProvider GetServiceProvider(Game) For Stage 3. public static IServiceProvider? GetServiceProvider(this Game _) Parameters _ Game Returns IServiceProvider GetServiceProvider(MBSubModuleBase) For Stage 3. public static IServiceProvider? GetServiceProvider(this MBSubModuleBase _) Parameters _ MBSubModuleBase Returns IServiceProvider GetServices(MBSubModuleBase) For Stage 2. public static IServiceCollection? GetServices(this MBSubModuleBase _) Parameters _ MBSubModuleBase Returns IServiceCollection GetSubSystem(IServiceProvider, string) public static ISubSystem? GetSubSystem(this IServiceProvider sp, string id) Parameters sp IServiceProvider id string Returns ISubSystem GetTempServiceProvider(MBSubModuleBase) For Stage 2. public static IServiceProvider? GetTempServiceProvider(this MBSubModuleBase _) Parameters _ MBSubModuleBase Returns IServiceProvider"
  },
  "api/Bannerlord.ButterLib.Common.Extensions.MbEventExtensions.html": {
    "href": "api/Bannerlord.ButterLib.Common.Extensions.MbEventExtensions.html",
    "title": "Class MbEventExtensions | ButterLib Documentation",
    "keywords": "Class MbEventExtensions Namespace Bannerlord.ButterLib.Common.Extensions Assembly Bannerlord.ButterLib.dll Extension class of the TaleWorlds.CampaignSystem.MbEvent class and its generic variations. public static class MbEventExtensions Inheritance object MbEventExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks For some reason TW hid \"Invoke\" methods of the MbEvent classes with number of generic arguments greater than one. This extension class corrects said misconception. Methods Invoke<T1, T2>(MbEvent<T1, T2>, T1, T2) Invokes all the listeners to the specified TaleWorlds.CampaignSystem.MbEvent<T1, T2>. public static void Invoke<T1, T2>(this MbEvent<T1, T2> instance, T1 arg1, T2 arg2) Parameters instance MbEvent<T1, T2> An instance of TaleWorlds.CampaignSystem.MbEvent<T1, T2> to call \"Invoke\" against. arg1 T1 Fist argument of the event. arg2 T2 Second argument of the event. Type Parameters T1 The type of the first event argument. T2 The type of the second event argument. Remarks This is accomplished by calling a delegate on the private method called \"Invoke\" of the TaleWorlds.CampaignSystem.MbEvent<T1, T2>, which guarantees fast and native execution. Invoke<T1, T2, T3>(MbEvent<T1, T2, T3>, T1, T2, T3) Invokes all the listeners to the specified TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3>. public static void Invoke<T1, T2, T3>(this MbEvent<T1, T2, T3> instance, T1 arg1, T2 arg2, T3 arg3) Parameters instance MbEvent<T1, T2, T3> An instance of TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3> to call \"Invoke\" against. arg1 T1 Fist argument of the event. arg2 T2 Second argument of the event. arg3 T3 Third argument of the event. Type Parameters T1 The type of the first event argument. T2 The type of the second event argument. T3 The type of the third event argument. Remarks This is accomplished by calling a delegate on the private method called \"Invoke\" of the TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3>, which guarantees fast and native execution. Invoke<T1, T2, T3, T4>(MbEvent<T1, T2, T3, T4>, T1, T2, T3, T4) Invokes all the listeners to the specified TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3, T4>. public static void Invoke<T1, T2, T3, T4>(this MbEvent<T1, T2, T3, T4> instance, T1 arg1, T2 arg2, T3 arg3, T4 arg4) Parameters instance MbEvent<T1, T2, T3, T4> An instance of TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3, T4> to call \"Invoke\" against. arg1 T1 Fist argument of the event. arg2 T2 Second argument of the event. arg3 T3 Third argument of the event. arg4 T4 Fourth argument of the event. Type Parameters T1 The type of the first event argument. T2 The type of the second event argument. T3 The type of the third event argument. T4 The type of the fourth event argument. Remarks This is accomplished by calling a delegate on the private method called \"Invoke\" of the TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3, T4>, which guarantees fast and native execution. Invoke<T1, T2, T3, T4, T5>(MbEvent<T1, T2, T3, T4, T5>, T1, T2, T3, T4, T5) Invokes all the listeners to the specified TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3, T4, T5>. public static void Invoke<T1, T2, T3, T4, T5>(this MbEvent<T1, T2, T3, T4, T5> instance, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) Parameters instance MbEvent<T1, T2, T3, T4, T5> An instance of TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3, T4, T5> to call \"Invoke\" against. arg1 T1 Fist argument of the event. arg2 T2 Second argument of the event. arg3 T3 Third argument of the event. arg4 T4 Fourth argument of the event. arg5 T5 Fifth argument of the event. Type Parameters T1 The type of the first event argument. T2 The type of the second event argument. T3 The type of the third event argument. T4 The type of the fourth event argument. T5 The type of the fifth event argument. Remarks This is accomplished by calling a delegate on the private method called \"Invoke\" of the TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3, T4, T5>, which guarantees fast and native execution. Invoke<T1, T2, T3, T4, T5, T6>(MbEvent<T1, T2, T3, T4, T5, T6>, T1, T2, T3, T4, T5, T6) Invokes all the listeners to the specified TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3, T4, T5, T6>. public static void Invoke<T1, T2, T3, T4, T5, T6>(this MbEvent<T1, T2, T3, T4, T5, T6> instance, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) Parameters instance MbEvent<T1, T2, T3, T4, T5, T6> An instance of TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3, T4, T5, T6> to call \"Invoke\" against. arg1 T1 Fist argument of the event. arg2 T2 Second argument of the event. arg3 T3 Third argument of the event. arg4 T4 Fourth argument of the event. arg5 T5 Fifth argument of the event. arg6 T6 Sixth argument of the event. Type Parameters T1 The type of the first event argument. T2 The type of the second event argument. T3 The type of the third event argument. T4 The type of the fourth event argument. T5 The type of the fifth event argument. T6 The type of the sixth event argument. Remarks This is accomplished by calling a delegate on the private method called \"Invoke\" of the TaleWorlds.CampaignSystem.MbEvent<T1, T2, T3, T4, T5, T6>, which guarantees fast and native execution."
  },
  "api/Bannerlord.ButterLib.Common.Extensions.html": {
    "href": "api/Bannerlord.ButterLib.Common.Extensions.html",
    "title": "Namespace Bannerlord.ButterLib.Common.Extensions | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.Common.Extensions Classes ApplicationVersionExtensions An extension class for the ApplicationVersion. CampaignExtensions Helper extension of the Campaign class returning additional information, provided by the ButterLib. DependencyInjectionExtensions MbEventExtensions Extension class of the TaleWorlds.CampaignSystem.MbEvent class and its generic variations."
  },
  "api/Bannerlord.ButterLib.Common.Helpers.ApplicationVersionComparer.html": {
    "href": "api/Bannerlord.ButterLib.Common.Helpers.ApplicationVersionComparer.html",
    "title": "Class ApplicationVersionComparer | ButterLib Documentation",
    "keywords": "Class ApplicationVersionComparer Namespace Bannerlord.ButterLib.Common.Helpers Assembly Bannerlord.ButterLib.dll public class ApplicationVersionComparer : IComparer<ApplicationVersion> Inheritance object ApplicationVersionComparer Implements IComparer<ApplicationVersion> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Compare(ApplicationVersion, ApplicationVersion) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. public int Compare(ApplicationVersion x, ApplicationVersion y) Parameters x ApplicationVersion The first object to compare. y ApplicationVersion The second object to compare. Returns int A signed integer that indicates the relative values of x and y, as shown in the following table.Value Meaning Less than zero x is less than y.Zero x equals y.Greater than zero x is greater than y."
  },
  "api/Bannerlord.ButterLib.Common.Helpers.ElegantPairHelper.html": {
    "href": "api/Bannerlord.ButterLib.Common.Helpers.ElegantPairHelper.html",
    "title": "Class ElegantPairHelper | ButterLib Documentation",
    "keywords": "Class ElegantPairHelper Namespace Bannerlord.ButterLib.Common.Helpers Assembly Bannerlord.ButterLib.dll Helper class that implements the pairing function created by Matthew Szudzik. public static class ElegantPairHelper Inheritance object ElegantPairHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks A pairing function on a set A associates each pair of members from A with a single member of B, so that any two distinct pairs of members from A are associated with two distinct members of B. Methods Pair(short, short) Pairs two 16-bit signed integers based on their position. public static int Pair(short a, short b) Parameters a short First 16-bit signed integer in a pair. b short Second 16-bit signed integer in a pair. Returns int A 32-bit signed integer representing the initial pair. Pair(int, int) Pairs two 32-bit signed integers based on their position. public static long Pair(int a, int b) Parameters a int First 32-bit signed integer in a pair. b int Second 32-bit signed integer in a pair. Returns long A 64-bit signed integer representing the initial pair. Pair(ushort, ushort) Pairs two 16-bit unsigned integers based on their position. public static uint Pair(ushort a, ushort b) Parameters a ushort First 16-bit unsigned integer in a pair. b ushort Second 16-bit unsigned integer in a pair. Returns uint A 32-bit unsigned integer representing the initial pair. Pair(uint, uint) Pairs two 32-bit unsigned integers based on their position. public static ulong Pair(uint a, uint b) Parameters a uint First 32-bit unsigned integer in a pair. b uint Second 32-bit unsigned integer in a pair. Returns ulong A 64-bit unsigned integer representing the initial pair. Pair(MBGUID, MBGUID) Pairs two MBGUID objects based on their position. public static ulong Pair(MBGUID a, MBGUID b) Parameters a MBGUID First MBGUID object in a pair. b MBGUID Second MBGUID object in a pair. Returns ulong A 64-bit unsigned integer representing the initial pair. UnPair(int) Unpairs an 32-bit signed integer representing the pair into two 16-bit signed integers with regard to their initial positions before pairing. public static (short A, short B) UnPair(int pairValue) Parameters pairValue int A 32-bit signed integer representing the pair. Returns (short A, short B) A tuple of 16-bit signed integers that were paired. Remarks Due to some imperfections of the negative pairing algorithm, this method could be rather slow. UnPair(long) Unpairs an 64-bit signed integer representing the pair into two 32-bit signed integers with regard to their initial positions before pairing. public static (int A, int B) UnPair(long pairValue) Parameters pairValue long A 64-bit signed integer representing the pair. Returns (int A, int B) A tuple of 32-bit signed integers that were paired. Remarks Due to some imperfections of the negative pairing algorithm, this method could be rather slow. UnPair(uint) Unpairs an 32-bit unsigned integer representing the pair into two 16-bit unsigned integers with regard to their initial positions before pairing. public static (ushort A, ushort B) UnPair(uint pairValue) Parameters pairValue uint A 32-bit unsigned integer representing the pair. Returns (ushort A, ushort B) A tuple of 16-bit unsigned integers that were paired. UnPair(ulong) Unpairs an 64-bit unsigned integer representing the pair into two 32-bit unsigned integers with regard to their initial positions before pairing. public static (uint A, uint B) UnPair(ulong pairValue) Parameters pairValue ulong A 64-bit unsigned integer representing the pair. Returns (uint A, uint B) A tuple of 32-bit unsigned integers that were paired. UnPairMBGUID(ulong) Unpairs an 64-bit unsigned integer representing the pair into two MBGUID objects with regard to their initial positions before pairing. public static (MBGUID A, MBGUID B) UnPairMBGUID(ulong pairValue) Parameters pairValue ulong A 64-bit unsigned integer representing the pair. Returns (MBGUID A, MBGUID B) A tuple of MBGUID objects that were paired."
  },
  "api/Bannerlord.ButterLib.Common.Helpers.LocalizationHelper.PluralForm.html": {
    "href": "api/Bannerlord.ButterLib.Common.Helpers.LocalizationHelper.PluralForm.html",
    "title": "Enum LocalizationHelper.PluralForm | ButterLib Documentation",
    "keywords": "Enum LocalizationHelper.PluralForm Namespace Bannerlord.ButterLib.Common.Helpers Assembly Bannerlord.ButterLib.dll public enum LocalizationHelper.PluralForm : byte Fields Plural = 3 Singular = 0 SpecificPlural = 2 SpecificSingular = 1"
  },
  "api/Bannerlord.ButterLib.Common.Helpers.LocalizationHelper.RecursiveCaller.html": {
    "href": "api/Bannerlord.ButterLib.Common.Helpers.LocalizationHelper.RecursiveCaller.html",
    "title": "Enum LocalizationHelper.RecursiveCaller | ButterLib Documentation",
    "keywords": "Enum LocalizationHelper.RecursiveCaller Namespace Bannerlord.ButterLib.Common.Helpers Assembly Bannerlord.ButterLib.dll public enum LocalizationHelper.RecursiveCaller : byte Fields Clan = 3 Hero = 1 Kingdom = 4 None = 0 Settlement = 2"
  },
  "api/Bannerlord.ButterLib.Common.Helpers.LocalizationHelper.html": {
    "href": "api/Bannerlord.ButterLib.Common.Helpers.LocalizationHelper.html",
    "title": "Class LocalizationHelper | ButterLib Documentation",
    "keywords": "Class LocalizationHelper Namespace Bannerlord.ButterLib.Common.Helpers Assembly Bannerlord.ButterLib.dll Helper class used to store numeric variables or complex entities in the TextObject. public static class LocalizationHelper Inheritance object LocalizationHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields LIST_END_TAG A string tag used in SetListVariable(TextObject?, string, List<string>, string, bool) method. Will contain the last element of the list. public const string LIST_END_TAG = \"END\" Field Value string LIST_HAS_ITEMS_TAG A string tag used in SetListVariable(TextObject?, string, List<string>, string, bool) method. Indicates that list has at least 1 element. public const string LIST_HAS_ITEMS_TAG = \"ANY\" Field Value string LIST_HAS_MULTIPLE_ITEMS_TAG A string tag used in SetListVariable(TextObject?, string, List<string>, string, bool) method. Indicates that list has more than 1 elements. public const string LIST_HAS_MULTIPLE_ITEMS_TAG = \"IS_PLURAL\" Field Value string LIST_START_TAG A string tag used in SetListVariable(TextObject?, string, List<string>, string, bool) method. Will contain all the elements of the list except the last one, separated by a comma. For empty lists or lists with a single element it will contain an empty string. public const string LIST_START_TAG = \"START\" Field Value string PLURAL_FORM_TAG A string tag that corresponds with Plural and could be stored as an attribute of the numeric variable by the \"SetNumericVariable\" method. public const string PLURAL_FORM_TAG = \"PLURAL_FORM\" Field Value string SPECIFIC_PLURAL_FORM_TAG A string tag that corresponds with SpecificPlural and could be stored as an attribute of the numeric variable by the \"SetNumericVariable\" method. public const string SPECIFIC_PLURAL_FORM_TAG = \"SPECIFIC_PLURAL_FORM\" Field Value string SPECIFIC_SINGULAR_FORM_TAG A string tag that corresponds with SpecificSingular and could be stored as an attribute of the numeric variable by the \"SetNumericVariable\" method. public const string SPECIFIC_SINGULAR_FORM_TAG = \"SPECIFIC_SINGULAR_FORM\" Field Value string Methods GetPluralForm(int) Gets which LocalizationHelper.PluralForm should be used with the given number according to the grammar rules of the game language. public static LocalizationHelper.PluralForm GetPluralForm(int number) Parameters number int An integer number to get appropriate LocalizationHelper.PluralForm for. Returns LocalizationHelper.PluralForm The appropriate LocalizationHelper.PluralForm that should be used with the given number in accordance with the grammar rules of the game language. GetPluralForm(float) Gets which LocalizationHelper.PluralForm should be used with the given number according to the grammar rules of the game language. public static LocalizationHelper.PluralForm GetPluralForm(float number) Parameters number float A floating-point number to get appropriate LocalizationHelper.PluralForm for. Returns LocalizationHelper.PluralForm The appropriate LocalizationHelper.PluralForm that should be used with the given number in accordance with the grammar rules of the game language. SetEntityProperties<T>(TextObject?, string, T?, bool, RecursiveCaller) Sets complex entity into specified text variable, along with additional information on other related entities. public static void SetEntityProperties<T>(TextObject? parentTextObject, string tag, T? entity, bool addLeaderInfo = false, LocalizationHelper.RecursiveCaller recursiveCaller = RecursiveCaller.None) where T : class Parameters parentTextObject TextObject The TextObject to store entity information into. Null means that information will be stored into MBTextManager. tag string A string tag that will be used to store information about entity and also as a prefix for tags that will store other relevant entities. entity T An instance of the entity to be stored. addLeaderInfo bool An optional argument, specifying if information about leaders should be also stored, when applicable. recursiveCaller LocalizationHelper.RecursiveCaller An optional argument, specifying if method is called from itself, adding information on some related entity. Type Parameters T The type of the entity to be stored. SetListVariable(TextObject?, string, List<string>, string, bool) Sets a variable containing a list of strings to the specified tag so that all elements are correctly listed according to the grammar rules of the game language. public static void SetListVariable(TextObject? textObject, string tag, List<string> valuesList, string separator = \", \", bool useDistinctValues = true) Parameters textObject TextObject The TextObject to set a List<T> variable into. Null means that information will be stored into MBTextManager. tag string A string tag that will be used to store information about the strings in the provided list. valuesList List<string> A set of strings that has to be listed. separator string An optional argument specifying the string separator to be used for the listing. useDistinctValues bool An optional argument specifying whether only unique strings should be listed. Examples var lst = new [] { \"First Entry\", \"Second Entry\", \"Third Entry\", \"Second Entry\" }.ToList(); var txt = new TextObject(\"Here is the built-in text: '{TEST_TAG}'. Here is custom text: '{TEST_TAG.START}{?TEST_TAG.IS_PLURAL} and last but not least the {?}{\\\\?}{TEST_TAG.END}'\"); LocalizationHelper.SetListVariable(txt, \"TEST_TAG\", lst); InformationManager.DisplayMessage(new InformationMessage(txt!.ToString(), Color.FromUint(0x00F16D26))); Remarks The tag parameter will contain a TextObject with both the ready-to-use result of the built-in concatenation of the provided list of strings and all the necessary attributes to create custom concatenations. Please note that built-in concatenation uses the \"{=JLkq0ZkOSI}{START}{?IS_PLURAL} and {?}{\\?}{END}\" string from the \"..\\Bannerlord.ButterLib\\ModuleData\\Languages\\EN\\sta_strings.xml\". If you are planning to use it explicitly, it is advised to duplicate it in your own localization xml files for the sake of clarity. SetNumericVariable(TextObject?, string, int, string?) Sets a numeric variable along with the appropriate LocalizationHelper.PluralForm tag in accordance with the grammar rules of the game language. public static void SetNumericVariable(TextObject? textObject, string tag, int variableValue, string? format = null) Parameters textObject TextObject The TextObject to set a numeric variable into. Null means that information will be stored into MBTextManager. tag string A string tag that will be used to store information about the numeric variable. variableValue int An integer number to be set. format string An optional argument, specifying string format to be used with the number. SetNumericVariable(TextObject?, string, float, string?) Sets a numeric variable along with the appropriate LocalizationHelper.PluralForm tag in accordance with the grammar rules of the game language. public static void SetNumericVariable(TextObject? textObject, string tag, float variableValue, string? format = null) Parameters textObject TextObject The TextObject to set a numeric variable into. Null means that information will be stored into MBTextManager. tag string A string tag that will be used to store information about the numeric variable. variableValue float An floating-point number to be set. format string An optional argument, specifying string format to be used with the number."
  },
  "api/Bannerlord.ButterLib.Common.Helpers.html": {
    "href": "api/Bannerlord.ButterLib.Common.Helpers.html",
    "title": "Namespace Bannerlord.ButterLib.Common.Helpers | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.Common.Helpers Classes ApplicationVersionComparer ElegantPairHelper Helper class that implements the pairing function created by Matthew Szudzik. LocalizationHelper Helper class used to store numeric variables or complex entities in the TextObject. Enums LocalizationHelper.PluralForm LocalizationHelper.RecursiveCaller"
  },
  "api/Bannerlord.ButterLib.DelayedSubModule.DelayedSubModuleManager.html": {
    "href": "api/Bannerlord.ButterLib.DelayedSubModule.DelayedSubModuleManager.html",
    "title": "Class DelayedSubModuleManager | ButterLib Documentation",
    "keywords": "Class DelayedSubModuleManager Namespace Bannerlord.ButterLib.DelayedSubModule Assembly Bannerlord.ButterLib.dll Allows you to inject your own code into the load / unload sequence of other modules without specifying them directly as a dependency in 'SubModule.xml'. public static class DelayedSubModuleManager Inheritance object DelayedSubModuleManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Supported methods are: 'OnSubModuleLoad', 'OnSubModuleUnloaded', 'OnBeforeInitialModuleScreenSetAsRoot', 'OnGameStart', 'OnGameEnd'. The basic loading order still applies, so while you can technically subscribe to the 'OnSubModuleLoad' methods of the already loaded modules, it won't affect them as they will be executed before. The delegate passed will still be executed. Methods Register(Type) Registers a module to be a target of the DelayedSubModuleManager. public static void Register(Type subModule) Parameters subModule Type The exact type of the SubModule to be registered. Register(Type, int, string[]?, string[]?) Registers a module to be a target of the DelayedSubModuleManager Harmony patching. public static void Register(Type subModule, int priority, string[]? before, string[]? after) Parameters subModule Type The exact type of the SubModule to be patched. priority int The HarmonyLib.HarmonyPriority that would be assigned to the patches that would be made. before string[] A list of HarmonyLib.Harmony.Ids that should come after the patches that would be made. after string[] A list of HarmonyLib.Harmony.Ids that should come before the patches that would be made. Register<TSubModule>() Registers a module to be a target of the DelayedSubModuleManager. public static void Register<TSubModule>() where TSubModule : MBSubModuleBase Type Parameters TSubModule The exact type of the SubModule to be registered. Register<TSubModule>(int, string[]?, string[]?) Registers a module to be a target of the DelayedSubModuleManager Harmony patching. public static void Register<TSubModule>(int priority, string[]? before, string[]? after) where TSubModule : MBSubModuleBase Parameters priority int The HarmonyLib.HarmonyPriority that would be assigned to the patches that would be made. before string[] A list of HarmonyLib.Harmony.Ids that should come after the patches that would be made. after string[] A list of HarmonyLib.Harmony.Ids that should come before the patches that would be made. Type Parameters TSubModule The exact type of the SubModule to be patched. Subscribe(Type, MBSubModuleBase, string, SubscriptionType, EventHandler<SubscriptionEventArgs>) public static void Subscribe(Type mbSubModuleType, MBSubModuleBase caller, string method, SubscriptionType subscriptionType, EventHandler<SubscriptionEventArgs> @delegate) Parameters mbSubModuleType Type caller MBSubModuleBase method string subscriptionType SubscriptionType delegate EventHandler<SubscriptionEventArgs> Subscribe<T>(MBSubModuleBase, string, SubscriptionType, EventHandler<SubscriptionEventArgs>) public static void Subscribe<T>(MBSubModuleBase caller, string method, SubscriptionType subscriptionType, EventHandler<SubscriptionEventArgs> @delegate) where T : MBSubModuleBase Parameters caller MBSubModuleBase method string subscriptionType SubscriptionType delegate EventHandler<SubscriptionEventArgs> Type Parameters T Subscribe<T1, T2>(string, SubscriptionType, EventHandler<SubscriptionEventArgs>) public static void Subscribe<T1, T2>(string method, SubscriptionType subscriptionType, EventHandler<SubscriptionEventArgs> @delegate) where T1 : MBSubModuleBase where T2 : MBSubModuleBase Parameters method string subscriptionType SubscriptionType delegate EventHandler<SubscriptionEventArgs> Type Parameters T1 T2"
  },
  "api/Bannerlord.ButterLib.DelayedSubModule.SubscriptionEventArgs.html": {
    "href": "api/Bannerlord.ButterLib.DelayedSubModule.SubscriptionEventArgs.html",
    "title": "Class SubscriptionEventArgs | ButterLib Documentation",
    "keywords": "Class SubscriptionEventArgs Namespace Bannerlord.ButterLib.DelayedSubModule Assembly Bannerlord.ButterLib.dll A container class for the arguments of the events, that are added to the MBSubModuleBase public and protected method calls. public class SubscriptionEventArgs : EventArgs Inheritance object EventArgs SubscriptionEventArgs Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks These Events are injected via Harmony patching of the respective methods with HarmonyLib.HarmonyPatchType.Prefix and HarmonyLib.HarmonyPatchType.Postfix. Constructors SubscriptionEventArgs(bool) Initializes a new instance of the SubscriptionGlobalEventArgs class with the supplied values. public SubscriptionEventArgs(bool isBase) Parameters isBase bool An indicator that the underlying virtual implementation of the MBSubModuleBase method was called, not a derived class override. Properties IsBase An indicator that the underlying virtual implementation of the MBSubModuleBase method was called, not a derived class override. public bool IsBase { get; } Property Value bool true, if base MBSubModuleBase virtual method was called. false, if corresponding override method of the derived class specified in Type was called."
  },
  "api/Bannerlord.ButterLib.DelayedSubModule.SubscriptionGlobalEventArgs.html": {
    "href": "api/Bannerlord.ButterLib.DelayedSubModule.SubscriptionGlobalEventArgs.html",
    "title": "Class SubscriptionGlobalEventArgs | ButterLib Documentation",
    "keywords": "Class SubscriptionGlobalEventArgs Namespace Bannerlord.ButterLib.DelayedSubModule Assembly Bannerlord.ButterLib.dll A container class for the arguments of the events, that are added to the MBSubModuleBase public and protected method calls. public class SubscriptionGlobalEventArgs : EventArgs Inheritance object EventArgs SubscriptionGlobalEventArgs Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks These Events are injected via Harmony patching of the respective methods with HarmonyLib.HarmonyPatchType.Prefix and HarmonyLib.HarmonyPatchType.Postfix. Constructors SubscriptionGlobalEventArgs(Type, bool, SubscriptionType, string) Initializes a new instance of the SubscriptionGlobalEventArgs class with the supplied values. public SubscriptionGlobalEventArgs(Type type, bool isBase, SubscriptionType subscriptionType, string methodName) Parameters type Type The type of submodule for which the method was called. isBase bool An indicator that the underlying virtual implementation of the MBSubModuleBase method was called, not a derived class override. subscriptionType SubscriptionType A type of the Harmony patch that was used to raise the event. methodName string A method of the ArgumentException derived class that was used to raise the event. Exceptions ArgumentException Thrown when type does not point to a subclass of the ArgumentOutOfRangeException. ArgumentOutOfRangeException Thrown when subscriptionType is not a valid SubscriptionGlobalEventArgs enum. Properties IsBase An indicator that the underlying virtual implementation of the MBSubModuleBase method was called, not a derived class override. public bool IsBase { get; } Property Value bool true, if base MBSubModuleBase virtual method was called. SubscriptionType can only be a AfterMethod in that case. false, if corresponding override method of the derived class specified in Type was called. SubscriptionType could be both BeforeMethod and AfterMethod in that case. MethodName A method of the MBSubModuleBase derived class that was used to raise the event. public string MethodName { get; } Property Value string A string containing the name of the method. SubscriptionType A type of the Harmony patch that was used to raise the event. public SubscriptionType SubscriptionType { get; } Property Value SubscriptionType BeforeMethod, when event is raised before the execution of the method; AfterMethod, when event is raised after the execution of the method. Type The type of submodule for which the method was called. public Type Type { get; } Property Value Type Exact Type of the MBSubModuleBase derived class. Methods IsValid(Type, string, SubscriptionType) public bool IsValid(Type type, string methodName, SubscriptionType subscriptionType) Parameters type Type methodName string subscriptionType SubscriptionType Returns bool IsValid<T>(string, SubscriptionType) public bool IsValid<T>(string methodName, SubscriptionType subscriptionType) where T : MBSubModuleBase Parameters methodName string subscriptionType SubscriptionType Returns bool Type Parameters T"
  },
  "api/Bannerlord.ButterLib.DelayedSubModule.SubscriptionType.html": {
    "href": "api/Bannerlord.ButterLib.DelayedSubModule.SubscriptionType.html",
    "title": "Enum SubscriptionType | ButterLib Documentation",
    "keywords": "Enum SubscriptionType Namespace Bannerlord.ButterLib.DelayedSubModule Assembly Bannerlord.ButterLib.dll public enum SubscriptionType : byte Fields AfterMethod = 1 BeforeMethod = 0"
  },
  "api/Bannerlord.ButterLib.DelayedSubModule.html": {
    "href": "api/Bannerlord.ButterLib.DelayedSubModule.html",
    "title": "Namespace Bannerlord.ButterLib.DelayedSubModule | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.DelayedSubModule Classes DelayedSubModuleManager Allows you to inject your own code into the load / unload sequence of other modules without specifying them directly as a dependency in 'SubModule.xml'. SubscriptionEventArgs A container class for the arguments of the events, that are added to the MBSubModuleBase public and protected method calls. SubscriptionGlobalEventArgs A container class for the arguments of the events, that are added to the MBSubModuleBase public and protected method calls. Enums SubscriptionType"
  },
  "api/Bannerlord.ButterLib.DistanceMatrix.DistanceMatrix-1.html": {
    "href": "api/Bannerlord.ButterLib.DistanceMatrix.DistanceMatrix-1.html",
    "title": "Class DistanceMatrix<T> | ButterLib Documentation",
    "keywords": "Class DistanceMatrix<T> Namespace Bannerlord.ButterLib.DistanceMatrix Assembly Bannerlord.ButterLib.dll A generic class that pairs given objects of type T and for each pair calculates the distance between the objects that formed it. public abstract class DistanceMatrix<T> : DistanceMatrix where T : MBObjectBase Type Parameters T The type of objects for which the distance matrix should be calculated. Inheritance object DistanceMatrix DistanceMatrix<T> Inherited Members DistanceMatrix.Create<T>() DistanceMatrix.Create<T>(Func<IEnumerable<T>>, Func<T, T, object[], float>, object[]) DistanceMatrix.CalculateDistanceBetweenHeroes(Hero, Hero) DistanceMatrix.CalculateDistanceBetweenClans(Clan, Clan, Dictionary<ulong, WeightedDistance>) DistanceMatrix.CalculateDistanceBetweenKingdoms(Kingdom, Kingdom, DistanceMatrix<Clan>) DistanceMatrix.GetSettlementOwnersPairedList(DistanceMatrix<Settlement>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks DistanceMatrix<T> implements built-in calculation for the Hero, Settlement, Clan and Kingdom objects. For any other MBObjectBase subtypes custom EntityListGetter and DistanceCalculator methods should be provided using special constructor DistanceMatrix<T>.Create(Func<IEnumerable<T>>, Func<T, T, float>) . Constructors DistanceMatrix() Initializes a new instance of the DistanceMatrix<T> class with default EntityListGetter and DistanceCalculator methods. protected DistanceMatrix() Exceptions ArgumentException DistanceMatrix(Func<IEnumerable<T>>, Func<T, T, float>) Initializes a new instance of the DistanceMatrix<T> class with custom methods that will be used to get the list of analyzed objects and calculate the distances between them. protected DistanceMatrix(Func<IEnumerable<T>> customListGetter, Func<T, T, float> customDistanceCalculator) Parameters customListGetter Func<IEnumerable<T>> A delegate to the method that will be used to get a list of objects of type T for calculating the distances between them. customDistanceCalculator Func<T, T, float> A delegate to the method that will be used to calculate the distance between two given type T objects. Exceptions ArgumentException Properties AsDictionary Raw distance matrix representation public abstract Dictionary<ulong, float> AsDictionary { get; } Property Value Dictionary<ulong, float> A dictionary of paired type T objects represented by unique 64-bit unsigned number as key and floating-point numbers, representing distances between those objects as value. AsFlatenedDictionary Objectified distance matrix representation for nearest neighbours processing public abstract Dictionary<T, SortedSet<(T OtherObject, float Distance)>> AsFlatenedDictionary { get; } Property Value Dictionary<T, SortedSet<(T OtherObject, float Distance)>> A dictionary of the T object type as a key and a values are represented by a SortedSet<T> containing tuples of all other objects and the corresponding distances in a form of floating point numbers. AsTypedDictionary Objectified distance matrix representation public abstract Dictionary<(T Object1, T Object2), float> AsTypedDictionary { get; } Property Value Dictionary<(T Object1, T Object2), float> A dictionary of paired type T objects as key and floating-point numbers, representing distances between those objects as value. Methods Create() Initializes and returns a new instance of the DistanceMatrix<T> class as per actual implementation with the default EntityListGetter and DistanceCalculator methods. public static DistanceMatrix<T>? Create() Returns DistanceMatrix<T> Exceptions ArgumentException Create(Func<IEnumerable<T>>, Func<T, T, object[]?, float>, object[]?) Initializes and returns a new instance of the DistanceMatrix<T> class as per actual implementation with custom methods that will be used to get the list of analyzed objects and calculate the distances between them. public static DistanceMatrix<T>? Create(Func<IEnumerable<T>> customListGetter, Func<T, T, object[]?, float> customDistanceCalculator, object[]? distanceCalculatorArgs) Parameters customListGetter Func<IEnumerable<T>> A delegate to the method that will be used to get a list of objects of type T for calculating the distances between them. customDistanceCalculator Func<T, T, object[], float> A delegate to the method that will be used to calculate the distance between two given type T objects. distanceCalculatorArgs object[] Optional array of arguments that will be passed to the calculation method. Returns DistanceMatrix<T> Exceptions ArgumentException GetDistance(T, T) Gets calculated distance between specified type T objects. public abstract float GetDistance(T object1, T object2) Parameters object1 T The first of the objects between which it is necessary to determine the distance. object2 T The second of the objects between which it is necessary to determine the distance. Returns float A floating-point number representing the distance between two specified MBObjectBase objects; or NaN, if distance was not calculated or it is uncomputable. GetNearestNeighbours(T, int) Search for nearest neighbours of the specified type T object. public abstract IEnumerable<(T OtherObject, float Distance)> GetNearestNeighbours(T inquiredObject, int count) Parameters inquiredObject T Object to search nearest neighbours for. count int Number of neighbours to be returned. Returns IEnumerable<(T OtherObject, float Distance)> GetNearestNeighbours(T, int, Func<(T OtherObject, float Distance), bool>) Search for nearest neighbours of the specified type T object using provided search predicate. public abstract IEnumerable<(T OtherObject, float Distance)> GetNearestNeighbours(T inquiredObject, int count, Func<(T OtherObject, float Distance), bool> searchPredicate) Parameters inquiredObject T Object to search nearest neighbours for. count int Number of neighbours to be returned. searchPredicate Func<(T OtherObject, float Distance), bool> A search predicate to filter through neighbours before returning nearest ones that qualify. Returns IEnumerable<(T OtherObject, float Distance)> Remarks Does not automatically exclude NaN distances. GetNearestNeighboursNormalized(T, int, Func<(T OtherObject, float Distance), bool>, float, float) Search for nearest neighbours of the specified type T object using provided search predicate. Then normalize the result to a given range based on all the ditances between specified object and other objects in the Matrix that also qualify the predicate. public abstract IEnumerable<(T OtherObject, float Distance)> GetNearestNeighboursNormalized(T inquiredObject, int count, Func<(T OtherObject, float Distance), bool> searchPredicate, float scaleMin = 0, float scaleMax = 100) Parameters inquiredObject T Object to search nearest neighbours for. count int Number of neighbours to be returned. searchPredicate Func<(T OtherObject, float Distance), bool> A search predicate to filter through neighbours before returning nearest ones that qualify. scaleMin float Minimum normalized value. scaleMax float Maximum normalized value. Returns IEnumerable<(T OtherObject, float Distance)> Remarks Does not automatically exclude NaN distances. GetNearestNeighboursNormalized(T, int, float, float) Search for nearest neighbours of the specified type T object and then normalize the result to a given range based on all the ditances between specified object and other objects in the Matrix. public abstract IEnumerable<(T OtherObject, float Distance)> GetNearestNeighboursNormalized(T inquiredObject, int count, float scaleMin = 0, float scaleMax = 100) Parameters inquiredObject T Object to search nearest neighbours for. count int Number of neighbours to be returned. scaleMin float Minimum normalized value. scaleMax float Maximum normalized value. Returns IEnumerable<(T OtherObject, float Distance)> Remarks Automatically excludes NaN distances. SetDistance(T, T, float) Sets new distance value for the specified type T objects. public abstract void SetDistance(T object1, T object2, float distance) Parameters object1 T The first of the objects between which it is necessary to change the predetermined distance. object2 T The second of the objects between which it is necessary to change the predetermined distance. distance float New distance value."
  },
  "api/Bannerlord.ButterLib.DistanceMatrix.DistanceMatrix.html": {
    "href": "api/Bannerlord.ButterLib.DistanceMatrix.DistanceMatrix.html",
    "title": "Class DistanceMatrix | ButterLib Documentation",
    "keywords": "Class DistanceMatrix Namespace Bannerlord.ButterLib.DistanceMatrix Assembly Bannerlord.ButterLib.dll An abstract class used in a DistanceMatrix<T> derived class, that pairs given objects of type T and for each pair calculates the distance between the objects that formed it. public abstract class DistanceMatrix Inheritance object DistanceMatrix Derived DistanceMatrix<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CalculateDistanceBetweenClans(Clan, Clan, Dictionary<ulong, WeightedDistance>) Calculates distance between two given Clan objects. public static float? CalculateDistanceBetweenClans(Clan clan1, Clan clan2, Dictionary<ulong, WeightedDistance> settlementOwnersPairedList) Parameters clan1 Clan First of the clans to calculate distance between. clan2 Clan Second of the clans to calculate distance between. settlementOwnersPairedList Dictionary<ulong, WeightedDistance> List of the distances between pairs of settlements and of the weights of the paired settlements, except that the owner clan pairs are used instead of the settlements themselves to speed up the process. Returns float? A floating-point number representing the distance between two specified Clan objects or NaN if distance could not be calculated (usually when clan has no fiefs). Remarks Calculation is based on the average distance between clans fiefs weighted by the fief type. CalculateDistanceBetweenHeroes(Hero, Hero) Calculates distance between two given Hero objects. public static float? CalculateDistanceBetweenHeroes(Hero hero1, Hero hero2) Parameters hero1 Hero The first of the heroes to calculate distance between. hero2 Hero The second of the heroes to calculate distance between. Returns float? A floating-point number representing the distance between two specified Hero objects or NaN if distance could not be calculated. CalculateDistanceBetweenKingdoms(Kingdom, Kingdom, DistanceMatrix<Clan>) Calculates distance between two given Kingdom objects. public static float? CalculateDistanceBetweenKingdoms(Kingdom kingdom1, Kingdom kingdom2, DistanceMatrix<Clan> clanDistanceMatrix) Parameters kingdom1 Kingdom First of the kingdoms to calculate distance between. kingdom2 Kingdom Second of the kingdoms to calculate distance between. clanDistanceMatrix DistanceMatrix<Clan> Settlement distance matrix . Returns float? A floating-point number representing the distance between two specified Kingdom objects or NaN if distance could not be calculated. Remarks Calculation is based on the average distance between kingdoms fiefs weighted by the fief type. Create<T>() Initializes a new instance of the DistanceMatrix<T> class as per actual implementation with the default EntityListGetter and DistanceCalculator methods. public static DistanceMatrix<T>? Create<T>() where T : MBObjectBase Returns DistanceMatrix<T> Type Parameters T Exceptions ArgumentException Create<T>(Func<IEnumerable<T>>, Func<T, T, object[]?, float>, object[]?) Initializes and returns a new instance of the DistanceMatrix<T> class as per actual implementation with custom methods that will be used to get the list of analyzed objects and calculate the distances between them. public static DistanceMatrix<T>? Create<T>(Func<IEnumerable<T>> customListGetter, Func<T, T, object[]?, float> customDistanceCalculator, object[]? distanceCalculatorArgs) where T : MBObjectBase Parameters customListGetter Func<IEnumerable<T>> A delegate to the method that will be used to get a list of objects of type T for calculating the distances between them. customDistanceCalculator Func<T, T, object[], float> A delegate to the method that will be used to calculate the distance between two given type T objects. distanceCalculatorArgs object[] Optional array of arguments that will be passed to the calculation method. Returns DistanceMatrix<T> Type Parameters T Exceptions ArgumentException GetSettlementOwnersPairedList(DistanceMatrix<Settlement>) Transforms given Settlement distance matrix into list of the weighted distances between pairs of settlements, except that the owner clan pairs are used instead of the settlements themselves. public static Dictionary<ulong, WeightedDistance>? GetSettlementOwnersPairedList(DistanceMatrix<Settlement> settlementDistanceMatrix) Parameters settlementDistanceMatrix DistanceMatrix<Settlement> Settlement distance matrix to transform into list. Returns Dictionary<ulong, WeightedDistance> A list of tuples holding information about pair of initial settlements owners, distance between settlements and combined settlement weight. Remarks This method could be used to supply CalculateDistanceBetweenClans(Clan, Clan, Dictionary<ulong, WeightedDistance>) method with required list argument."
  },
  "api/Bannerlord.ButterLib.DistanceMatrix.WeightedDistance.html": {
    "href": "api/Bannerlord.ButterLib.DistanceMatrix.WeightedDistance.html",
    "title": "Class WeightedDistance | ButterLib Documentation",
    "keywords": "Class WeightedDistance Namespace Bannerlord.ButterLib.DistanceMatrix Assembly Bannerlord.ButterLib.dll Weighted distance between two objects. public record WeightedDistance : IEquatable<WeightedDistance> Inheritance object WeightedDistance Implements IEquatable<WeightedDistance> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors WeightedDistance(float, float) Weighted distance between two objects. public WeightedDistance(float Distance, float Weight) Parameters Distance float Distance between a pair of objects Weight float Weight of objects Properties Distance Distance between a pair of objects public float Distance { get; init; } Property Value float Weight Weight of objects public float Weight { get; init; } Property Value float"
  },
  "api/Bannerlord.ButterLib.DistanceMatrix.html": {
    "href": "api/Bannerlord.ButterLib.DistanceMatrix.html",
    "title": "Namespace Bannerlord.ButterLib.DistanceMatrix | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.DistanceMatrix Classes DistanceMatrix An abstract class used in a DistanceMatrix<T> derived class, that pairs given objects of type T and for each pair calculates the distance between the objects that formed it. DistanceMatrix<T> A generic class that pairs given objects of type T and for each pair calculates the distance between the objects that formed it. WeightedDistance Weighted distance between two objects."
  },
  "api/Bannerlord.ButterLib.DynamicAPI.DynamicAPIClassAttribute.html": {
    "href": "api/Bannerlord.ButterLib.DynamicAPI.DynamicAPIClassAttribute.html",
    "title": "Class DynamicAPIClassAttribute | ButterLib Documentation",
    "keywords": "Class DynamicAPIClassAttribute Namespace Bannerlord.ButterLib.DynamicAPI Assembly Bannerlord.ButterLib.dll Requires a public empty constructor for instance methods [AttributeUsage(AttributeTargets.Class)] public sealed class DynamicAPIClassAttribute : Attribute, _Attribute Inheritance object Attribute DynamicAPIClassAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors DynamicAPIClassAttribute(string) public DynamicAPIClassAttribute(string @class) Parameters class string Properties Class public string Class { get; } Property Value string"
  },
  "api/Bannerlord.ButterLib.DynamicAPI.DynamicAPIInstance.html": {
    "href": "api/Bannerlord.ButterLib.DynamicAPI.DynamicAPIInstance.html",
    "title": "Class DynamicAPIInstance | ButterLib Documentation",
    "keywords": "Class DynamicAPIInstance Namespace Bannerlord.ButterLib.DynamicAPI Assembly Bannerlord.ButterLib.dll Represents a wrapper of an object marked with DynamicAPIClassAttribute. public class DynamicAPIInstance Inheritance object DynamicAPIInstance Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RequestMethod<TDelegate>(string?) Return an instance API method, see DynamicAPIMethodAttribute. We recommend to save the delegate instead of calling this function multiple times. public TDelegate? RequestMethod<TDelegate>(string? method) where TDelegate : Delegate Parameters method string Returns TDelegate Type Parameters TDelegate"
  },
  "api/Bannerlord.ButterLib.DynamicAPI.DynamicAPIMethodAttribute.html": {
    "href": "api/Bannerlord.ButterLib.DynamicAPI.DynamicAPIMethodAttribute.html",
    "title": "Class DynamicAPIMethodAttribute | ButterLib Documentation",
    "keywords": "Class DynamicAPIMethodAttribute Namespace Bannerlord.ButterLib.DynamicAPI Assembly Bannerlord.ButterLib.dll [AttributeUsage(AttributeTargets.Method)] public sealed class DynamicAPIMethodAttribute : Attribute, _Attribute Inheritance object Attribute DynamicAPIMethodAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors DynamicAPIMethodAttribute(string) public DynamicAPIMethodAttribute(string method) Parameters method string Properties Method public string Method { get; } Property Value string"
  },
  "api/Bannerlord.ButterLib.DynamicAPI.DynamicAPIProvider.html": {
    "href": "api/Bannerlord.ButterLib.DynamicAPI.DynamicAPIProvider.html",
    "title": "Class DynamicAPIProvider | ButterLib Documentation",
    "keywords": "Class DynamicAPIProvider Namespace Bannerlord.ButterLib.DynamicAPI Assembly Bannerlord.ButterLib.dll Requests will be available on OnBeforeInitialModuleScreenSetAsRoot() stage. The reason is, we need to wait for all SubModules to have OnSubModuleLoad() executed. public static class DynamicAPIProvider Inheritance object DynamicAPIProvider Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RequestAPIClass(string?) Return an API instance, see DynamicAPIClassAttribute. public static DynamicAPIInstance? RequestAPIClass(string? @class) Parameters class string Returns DynamicAPIInstance RequestAPIMethod<TDelegate>(string?, string?) Return a static API method, see DynamicAPIMethodAttribute. We recommend to save the delegate instead of calling this function multiple times. public static TDelegate? RequestAPIMethod<TDelegate>(string? @class, string? method) where TDelegate : Delegate Parameters class string method string Returns TDelegate Type Parameters TDelegate"
  },
  "api/Bannerlord.ButterLib.DynamicAPI.html": {
    "href": "api/Bannerlord.ButterLib.DynamicAPI.html",
    "title": "Namespace Bannerlord.ButterLib.DynamicAPI | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.DynamicAPI Classes DynamicAPIClassAttribute Requires a public empty constructor for instance methods DynamicAPIInstance Represents a wrapper of an object marked with DynamicAPIClassAttribute. DynamicAPIMethodAttribute DynamicAPIProvider Requests will be available on OnBeforeInitialModuleScreenSetAsRoot() stage. The reason is, we need to wait for all SubModules to have OnSubModuleLoad() executed."
  },
  "api/Bannerlord.ButterLib.ExceptionHandler.ExceptionReporter.html": {
    "href": "api/Bannerlord.ButterLib.ExceptionHandler.ExceptionReporter.html",
    "title": "Class ExceptionReporter | ButterLib Documentation",
    "keywords": "Class ExceptionReporter Namespace Bannerlord.ButterLib.ExceptionHandler Assembly Bannerlord.ButterLib.dll public static class ExceptionReporter Inheritance object ExceptionReporter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Show(Exception) public static void Show(Exception exception) Parameters exception Exception"
  },
  "api/Bannerlord.ButterLib.ExceptionHandler.html": {
    "href": "api/Bannerlord.ButterLib.ExceptionHandler.html",
    "title": "Namespace Bannerlord.ButterLib.ExceptionHandler | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.ExceptionHandler Classes ExceptionReporter"
  },
  "api/Bannerlord.ButterLib.Extensions.IInputContextExtensions.html": {
    "href": "api/Bannerlord.ButterLib.Extensions.IInputContextExtensions.html",
    "title": "Class IInputContextExtensions | ButterLib Documentation",
    "keywords": "Class IInputContextExtensions Namespace Bannerlord.ButterLib.Extensions Assembly Bannerlord.ButterLib.dll public static class IInputContextExtensions Inheritance object IInputContextExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods IsHotKeyDown<THotKeyBase>(IInputContext) public static bool IsHotKeyDown<THotKeyBase>(this IInputContext inputContext) where THotKeyBase : HotKeyBase Parameters inputContext IInputContext Returns bool Type Parameters THotKeyBase IsHotKeyPressed<THotKeyBase>(IInputContext) public static bool IsHotKeyPressed<THotKeyBase>(this IInputContext inputContext) where THotKeyBase : HotKeyBase Parameters inputContext IInputContext Returns bool Type Parameters THotKeyBase IsHotKeyReleased<THotKeyBase>(IInputContext) public static bool IsHotKeyReleased<THotKeyBase>(this IInputContext inputContext) where THotKeyBase : HotKeyBase Parameters inputContext IInputContext Returns bool Type Parameters THotKeyBase SubscribeToIsDownAndReleasedEvent<THotKeyBase>(IInputContext, Action) public static IDisposable? SubscribeToIsDownAndReleasedEvent<THotKeyBase>(this IInputContext inputContext, Action action) where THotKeyBase : HotKeyBase Parameters inputContext IInputContext action Action Returns IDisposable Type Parameters THotKeyBase SubscribeToIsDownEvent<THotKeyBase>(IInputContext, Action) public static IDisposable? SubscribeToIsDownEvent<THotKeyBase>(this IInputContext inputContext, Action action) where THotKeyBase : HotKeyBase Parameters inputContext IInputContext action Action Returns IDisposable Type Parameters THotKeyBase SubscribeToOnPressedEvent<THotKeyBase>(IInputContext, Action) public static IDisposable? SubscribeToOnPressedEvent<THotKeyBase>(this IInputContext inputContext, Action action) where THotKeyBase : HotKeyBase Parameters inputContext IInputContext action Action Returns IDisposable Type Parameters THotKeyBase SubscribeToOnReleasedEvent<THotKeyBase>(IInputContext, Action) public static IDisposable? SubscribeToOnReleasedEvent<THotKeyBase>(this IInputContext inputContext, Action action) where THotKeyBase : HotKeyBase Parameters inputContext IInputContext action Action Returns IDisposable Type Parameters THotKeyBase"
  },
  "api/Bannerlord.ButterLib.Extensions.html": {
    "href": "api/Bannerlord.ButterLib.Extensions.html",
    "title": "Namespace Bannerlord.ButterLib.Extensions | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.Extensions Classes IInputContextExtensions"
  },
  "api/Bannerlord.ButterLib.HotKeys.HotKeyBase.html": {
    "href": "api/Bannerlord.ButterLib.HotKeys.HotKeyBase.html",
    "title": "Class HotKeyBase | ButterLib Documentation",
    "keywords": "Class HotKeyBase Namespace Bannerlord.ButterLib.HotKeys Assembly Bannerlord.ButterLib.dll Base type for all HotKey definitions to derive from. public abstract class HotKeyBase Inheritance object HotKeyBase Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors HotKeyBase(string) The required constructor which has the bare minimum needed to register a key. protected HotKeyBase(string uid) Parameters uid string The (unique to your mod) id for your hotkey. HotKeyBase(string, string, string, InputKey, string) protected HotKeyBase(string uid, string displayName, string description, InputKey defaultKey, string category) Parameters uid string displayName string description string defaultKey InputKey category string Properties Category The Category in the options menu under which this hotkey will appear. Categories protected virtual string Category { get; } Property Value string DefaultKey The default key for your HotKey, if this is not set in your constructor it will default to Invalid protected virtual InputKey DefaultKey { get; } Property Value InputKey Description The description text that will appear in the options menu next to your hotkey. protected virtual string Description { get; } Property Value string DisplayName The display name for your hotkey that will appear in the options menu. protected virtual string DisplayName { get; } Property Value string IsEnabled Tells the input manager whether or not to process input for this key. Setting this infrequently is cheaper than using Predicate but it is less convenient. public bool IsEnabled { get; set; } Property Value bool Predicate Provide none, one or many functions which all must evaluate to true in order for the key to process input. This does not need to be set, and can be reset with Predicate = null; public Func<bool>? Predicate { get; set; } Property Value Func<bool> Uid The unique (to your mod) Id for this hotkey. protected string Uid { get; } Property Value string Methods IsDown() Called once every frame a key remains down. protected virtual void IsDown() IsDownAndReleased() protected virtual void IsDownAndReleased() OnPressed() Called once on the frame a key was pressed. protected virtual void OnPressed() OnReleased() Called once on the frame a key was released. protected virtual void OnReleased() Events IsDownAndReleasedEvent Called once they key was pressed and released. public event Action? IsDownAndReleasedEvent Event Type Action IsDownEvent Called once every frame a key remains down. public event Action? IsDownEvent Event Type Action OnPressedEvent Called once on the frame a key was pressed. public event Action? OnPressedEvent Event Type Action OnReleasedEvent Called once on the frame a key was released. public event Action? OnReleasedEvent Event Type Action Operators implicit operator GameKey(HotKeyBase) Allows you to supply a HotKeyBase derived class wherever a GameKey might normally be used. public static implicit operator GameKey(HotKeyBase hotKey) Parameters hotKey HotKeyBase HotKeyBase to convert. Returns GameKey The GameKey stored internally."
  },
  "api/Bannerlord.ButterLib.HotKeys.HotKeyCategory.html": {
    "href": "api/Bannerlord.ButterLib.HotKeys.HotKeyCategory.html",
    "title": "Enum HotKeyCategory | ButterLib Documentation",
    "keywords": "Enum HotKeyCategory Namespace Bannerlord.ButterLib.HotKeys Assembly Bannerlord.ButterLib.dll public enum HotKeyCategory Fields Action = 0 CampaignMap = 1 Chat = 4 MenuShortcut = 2 OrderMenu = 3"
  },
  "api/Bannerlord.ButterLib.HotKeys.HotKeyManager.html": {
    "href": "api/Bannerlord.ButterLib.HotKeys.HotKeyManager.html",
    "title": "Class HotKeyManager | ButterLib Documentation",
    "keywords": "Class HotKeyManager Namespace Bannerlord.ButterLib.HotKeys Assembly Bannerlord.ButterLib.dll Describes a single HotKey group to which you can add individual HotKeyManager before building. public abstract class HotKeyManager Inheritance object HotKeyManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields Categories The available categories in the main menu for your hotkey to appear under. public static readonly IReadOnlyDictionary<HotKeyCategory, string> Categories Field Value IReadOnlyDictionary<HotKeyCategory, string> Methods Add<T>() Adds a hotkey to he manager ready for building. public abstract T Add<T>() where T : HotKeyBase, new() Returns T A new instance of HotKeyBase Type Parameters T The HotKeyBase derived type to add. Add<T>(T) Adds a hotkey to the manager ready for building. public abstract T Add<T>(T hotkey) where T : HotKeyBase Parameters hotkey T The HotKeyBase to add. Returns T The provided HotKeyBase (now initialized) Type Parameters T The HotKeyBase derived type to add. Exceptions ArgumentException Thrown when a hotkey with the same IdName exists. Build() Builds up the hotkeys and registers them with Bannerlord. public abstract IReadOnlyList<HotKeyBase> Build() Returns IReadOnlyList<HotKeyBase> Returns all the hotkeys that were built up. Create(string) Create a new HotKey group for your mod. public static HotKeyManager? Create(string modName) Parameters modName string The name of your mod. Returns HotKeyManager A HotKeyManager object for you to start adding new HotKeyManager to. Exceptions ArgumentException Thrown if a mod with the same name has already begun registering hotkeys. CreateWithOwnCategory(string, string) Create a new HotKey group for your mod with a separate entry on the Options Menu. public static HotKeyManager? CreateWithOwnCategory(string modName, string categoryName) Parameters modName string The name of your mod. categoryName string Category entry name in the Options Menu, supports translation Returns HotKeyManager A HotKeyManager object for you to start adding new HotKeyManager to. Exceptions ArgumentException Thrown if a mod with the same name has already begun registering hotkeys."
  },
  "api/Bannerlord.ButterLib.HotKeys.html": {
    "href": "api/Bannerlord.ButterLib.HotKeys.html",
    "title": "Namespace Bannerlord.ButterLib.HotKeys | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.HotKeys Classes HotKeyBase Base type for all HotKey definitions to derive from. HotKeyManager Describes a single HotKey group to which you can add individual HotKeyManager before building. Enums HotKeyCategory"
  },
  "api/Bannerlord.ButterLib.ImplementationLoaderSubModule.html": {
    "href": "api/Bannerlord.ButterLib.ImplementationLoaderSubModule.html",
    "title": "Class ImplementationLoaderSubModule | ButterLib Documentation",
    "keywords": "Class ImplementationLoaderSubModule Namespace Bannerlord.ButterLib Assembly Bannerlord.ButterLib.dll Loads all ButterLib's implementation libraries that are supported by the game. public sealed class ImplementationLoaderSubModule : MBSubModuleBaseListWrapper Inheritance object MBSubModuleBase MBSubModuleBaseListWrapper ImplementationLoaderSubModule Inherited Members MBSubModuleBaseListWrapper.SubModules MBSubModuleBaseListWrapper.OnSubModuleUnloaded() MBSubModuleBaseListWrapper.OnApplicationTick(float) MBSubModuleBaseListWrapper.OnBeforeInitialModuleScreenSetAsRoot() MBSubModuleBaseListWrapper.OnGameStart(Game, IGameStarter) MBSubModuleBaseListWrapper.InitializeGameStarter(Game, IGameStarter) MBSubModuleBaseListWrapper.DoLoading(Game) MBSubModuleBaseListWrapper.OnGameLoaded(Game, object) MBSubModuleBaseListWrapper.OnCampaignStart(Game, object) MBSubModuleBaseListWrapper.BeginGameStart(Game) MBSubModuleBaseListWrapper.OnGameEnd(Game) MBSubModuleBaseListWrapper.OnGameInitializationFinished(Game) MBSubModuleBaseListWrapper.OnBeforeMissionBehaviorInitialize(Mission) MBSubModuleBaseListWrapper.OnMissionBehaviorInitialize(Mission) MBSubModuleBaseListWrapper.OnMultiplayerGameStart(Game, object) MBSubModuleBaseListWrapper.OnNewGameCreated(Game, object) MBSubModuleBaseListWrapper.RegisterSubModuleObjects(bool) MBSubModuleBaseListWrapper.AfterRegisterSubModuleObjects(bool) MBSubModuleBaseListWrapper.OnAfterGameInitializationFinished(Game, object) MBSubModuleBaseListWrapper.OnConfigChanged() MBSubModuleBaseListWrapper.OnInitialState() MBSubModuleBaseListWrapper.AfterAsyncTickTick(float) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<Assembly>) DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<string>?, Action<LoggerConfiguration>?) DependencyInjectionExtensions.GetServiceProvider(MBSubModuleBase) DependencyInjectionExtensions.GetServices(MBSubModuleBase) DependencyInjectionExtensions.GetTempServiceProvider(MBSubModuleBase) Methods OnServiceRegistration() public override void OnServiceRegistration() OnSubModuleLoad() public override void OnSubModuleLoad()"
  },
  "api/Bannerlord.ButterLib.Logger.Extensions.LoggerExtensions.html": {
    "href": "api/Bannerlord.ButterLib.Logger.Extensions.LoggerExtensions.html",
    "title": "Class LoggerExtensions | ButterLib Documentation",
    "keywords": "Class LoggerExtensions Namespace Bannerlord.ButterLib.Logger.Extensions Assembly Bannerlord.ButterLib.dll public static class LoggerExtensions Inheritance object LoggerExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods LogAndDisplay(ILogger, LogLevel, Exception, string, params object[]) public static void LogAndDisplay(this ILogger logger, LogLevel logLevel, Exception exception, string message, params object[] args) Parameters logger ILogger logLevel LogLevel exception Exception message string args object[] LogAndDisplay(ILogger, LogLevel, string, params object[]) public static void LogAndDisplay(this ILogger logger, LogLevel logLevel, string message, params object[] args) Parameters logger ILogger logLevel LogLevel message string args object[] LogCriticalAndDisplay(ILogger, Exception, string, params object[]) public static void LogCriticalAndDisplay(this ILogger logger, Exception exception, string message, params object[] args) Parameters logger ILogger exception Exception message string args object[] LogCriticalAndDisplay(ILogger, string, params object[]) public static void LogCriticalAndDisplay(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[] LogDebugAndDisplay(ILogger, Exception, string, params object[]) public static void LogDebugAndDisplay(this ILogger logger, Exception exception, string message, params object[] args) Parameters logger ILogger exception Exception message string args object[] LogDebugAndDisplay(ILogger, string, params object[]) public static void LogDebugAndDisplay(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[] LogErrorAndDisplay(ILogger, Exception, string, params object[]) public static void LogErrorAndDisplay(this ILogger logger, Exception exception, string message, params object[] args) Parameters logger ILogger exception Exception message string args object[] LogErrorAndDisplay(ILogger, string, params object[]) public static void LogErrorAndDisplay(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[] LogInformationAndDisplay(ILogger, Exception, string, params object[]) public static void LogInformationAndDisplay(this ILogger logger, Exception exception, string message, params object[] args) Parameters logger ILogger exception Exception message string args object[] LogInformationAndDisplay(ILogger, string, params object[]) public static void LogInformationAndDisplay(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[] LogTraceAndDisplay(ILogger, Exception, string, params object[]) public static void LogTraceAndDisplay(this ILogger logger, Exception exception, string message, params object[] args) Parameters logger ILogger exception Exception message string args object[] LogTraceAndDisplay(ILogger, string, params object[]) public static void LogTraceAndDisplay(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[] LogWarningAndDisplay(ILogger, Exception, string, params object[]) public static void LogWarningAndDisplay(this ILogger logger, Exception exception, string message, params object[] args) Parameters logger ILogger exception Exception message string args object[] LogWarningAndDisplay(ILogger, string, params object[]) public static void LogWarningAndDisplay(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[]"
  },
  "api/Bannerlord.ButterLib.Logger.Extensions.html": {
    "href": "api/Bannerlord.ButterLib.Logger.Extensions.html",
    "title": "Namespace Bannerlord.ButterLib.Logger.Extensions | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.Logger.Extensions Classes LoggerExtensions"
  },
  "api/Bannerlord.ButterLib.MBSubModuleBaseExtended.IMBSubModuleBaseEx.html": {
    "href": "api/Bannerlord.ButterLib.MBSubModuleBaseExtended.IMBSubModuleBaseEx.html",
    "title": "Interface IMBSubModuleBaseEx | ButterLib Documentation",
    "keywords": "Interface IMBSubModuleBaseEx Namespace Bannerlord.ButterLib.MBSubModuleBaseExtended Assembly Bannerlord.ButterLib.dll An interface to use in your MBSubModuleBase-derived class. Provides new SubModule events. public interface IMBSubModuleBaseEx Methods OnAllSubModulesUnLoaded() Event that takes place right after OnSubModuleUnloaded events of all loaded submodules were handled. void OnAllSubModulesUnLoaded() OnBeforeInitialModuleScreenSetAsRootDelayed() Event that takes place right after OnBeforeInitialModuleScreenSetAsRoot events of all loaded submodules were handled. void OnBeforeInitialModuleScreenSetAsRootDelayed() OnGameEndDelayed(Game) Event that takes place right after OnGameEnd events of all loaded submodules were handled. void OnGameEndDelayed(Game game) Parameters game Game OnGameStartDelayed(Game, IGameStarter) Event that takes place right after OnGameStart events of all loaded submodules were handled. void OnGameStartDelayed(Game game, IGameStarter gameStarterObject) Parameters game Game gameStarterObject IGameStarter"
  },
  "api/Bannerlord.ButterLib.MBSubModuleBaseExtended.MBSubModuleBaseEx.html": {
    "href": "api/Bannerlord.ButterLib.MBSubModuleBaseExtended.MBSubModuleBaseEx.html",
    "title": "Class MBSubModuleBaseEx | ButterLib Documentation",
    "keywords": "Class MBSubModuleBaseEx Namespace Bannerlord.ButterLib.MBSubModuleBaseExtended Assembly Bannerlord.ButterLib.dll A MBSubModuleBase-derived abstract class, that provides new SubModule events. public abstract class MBSubModuleBaseEx : MBSubModuleBase, IMBSubModuleBaseEx Inheritance object MBSubModuleBase MBSubModuleBaseEx Implements IMBSubModuleBaseEx Inherited Members MBSubModuleBase.OnSubModuleLoad() MBSubModuleBase.OnSubModuleUnloaded() MBSubModuleBase.OnBeforeInitialModuleScreenSetAsRoot() MBSubModuleBase.OnConfigChanged() MBSubModuleBase.OnGameStart(Game, IGameStarter) MBSubModuleBase.OnApplicationTick(float) MBSubModuleBase.AfterAsyncTickTick(float) MBSubModuleBase.InitializeGameStarter(Game, IGameStarter) MBSubModuleBase.OnGameLoaded(Game, object) MBSubModuleBase.OnNewGameCreated(Game, object) MBSubModuleBase.BeginGameStart(Game) MBSubModuleBase.OnCampaignStart(Game, object) MBSubModuleBase.RegisterSubModuleObjects(bool) MBSubModuleBase.AfterRegisterSubModuleObjects(bool) MBSubModuleBase.OnMultiplayerGameStart(Game, object) MBSubModuleBase.OnGameInitializationFinished(Game) MBSubModuleBase.OnAfterGameInitializationFinished(Game, object) MBSubModuleBase.DoLoading(Game) MBSubModuleBase.OnGameEnd(Game) MBSubModuleBase.OnMissionBehaviorInitialize(Mission) MBSubModuleBase.OnBeforeMissionBehaviorInitialize(Mission) MBSubModuleBase.OnInitialState() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<Assembly>) DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<string>?, Action<LoggerConfiguration>?) DependencyInjectionExtensions.GetServiceProvider(MBSubModuleBase) DependencyInjectionExtensions.GetServices(MBSubModuleBase) DependencyInjectionExtensions.GetTempServiceProvider(MBSubModuleBase) Methods OnAllSubModulesUnLoaded() Event that takes place right after OnSubModuleUnloaded events of all loaded submodules were handled. public virtual void OnAllSubModulesUnLoaded() OnBeforeInitialModuleScreenSetAsRootDelayed() Event that takes place right after OnBeforeInitialModuleScreenSetAsRoot events of all loaded submodules were handled. public virtual void OnBeforeInitialModuleScreenSetAsRootDelayed() OnGameEndDelayed(Game) Event that takes place right after OnGameEnd events of all loaded submodules were handled. public virtual void OnGameEndDelayed(Game game) Parameters game Game OnGameStartDelayed(Game, IGameStarter) Event that takes place right after OnGameStart events of all loaded submodules were handled. public virtual void OnGameStartDelayed(Game game, IGameStarter gameStarterObject) Parameters game Game gameStarterObject IGameStarter"
  },
  "api/Bannerlord.ButterLib.MBSubModuleBaseExtended.html": {
    "href": "api/Bannerlord.ButterLib.MBSubModuleBaseExtended.html",
    "title": "Namespace Bannerlord.ButterLib.MBSubModuleBaseExtended | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.MBSubModuleBaseExtended Classes MBSubModuleBaseEx A MBSubModuleBase-derived abstract class, that provides new SubModule events. Interfaces IMBSubModuleBaseEx An interface to use in your MBSubModuleBase-derived class. Provides new SubModule events."
  },
  "api/Bannerlord.ButterLib.ObjectSystem.Extensions.MBObjectBaseExtensions.html": {
    "href": "api/Bannerlord.ButterLib.ObjectSystem.Extensions.MBObjectBaseExtensions.html",
    "title": "Class MBObjectBaseExtensions | ButterLib Documentation",
    "keywords": "Class MBObjectBaseExtensions Namespace Bannerlord.ButterLib.ObjectSystem.Extensions Assembly Bannerlord.ButterLib.dll MBObjectBase extension methods for Object Extension Data (dynamic variable / flag storage) public static class MBObjectBaseExtensions Inheritance object MBObjectBaseExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods HasFlag(MBObjectBase, string) Check whether the flag name is set upon object. public static bool HasFlag(this MBObjectBase @object, string name) Parameters object MBObjectBase A game object. name string A string flag. Returns bool true if the flag is set, else false. Examples if (thisKingdom.HasFlag(\"IsRevoltFaction\")) continue; RemoveFlag(MBObjectBase, string) Remove the flag name from object, if set. public static void RemoveFlag(this MBObjectBase @object, string name) Parameters object MBObjectBase A game object. name string A string flag. Examples myHero.RemoveFlag(\"IsImmortal\"); SetFlag(MBObjectBase, string) Set the flag name upon object. public static void SetFlag(this MBObjectBase @object, string name) Parameters object MBObjectBase A game object. name string A string flag. Examples myKingdom.SetFlag(\"IsRevoltFaction\");"
  },
  "api/Bannerlord.ButterLib.ObjectSystem.Extensions.html": {
    "href": "api/Bannerlord.ButterLib.ObjectSystem.Extensions.html",
    "title": "Namespace Bannerlord.ButterLib.ObjectSystem.Extensions | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.ObjectSystem.Extensions Classes MBObjectBaseExtensions MBObjectBase extension methods for Object Extension Data (dynamic variable / flag storage)"
  },
  "api/Bannerlord.ButterLib.ObjectSystem.IMBObjectFinder.html": {
    "href": "api/Bannerlord.ButterLib.ObjectSystem.IMBObjectFinder.html",
    "title": "Interface IMBObjectFinder | ButterLib Documentation",
    "keywords": "Interface IMBObjectFinder Namespace Bannerlord.ButterLib.ObjectSystem Assembly Bannerlord.ButterLib.dll Finds MBObjectBase objects based on their MBGUID public interface IMBObjectFinder Methods Find(MBGUID, Type?) MBObjectBase? Find(MBGUID id, Type? type = null) Parameters id MBGUID type Type Returns MBObjectBase"
  },
  "api/Bannerlord.ButterLib.ObjectSystem.IMBObjectKeeper.html": {
    "href": "api/Bannerlord.ButterLib.ObjectSystem.IMBObjectKeeper.html",
    "title": "Interface IMBObjectKeeper | ButterLib Documentation",
    "keywords": "Interface IMBObjectKeeper Namespace Bannerlord.ButterLib.ObjectSystem Assembly Bannerlord.ButterLib.dll Keeps all MBObjectBase references for custom serialization public interface IMBObjectKeeper Methods Keep(MBObjectBase) void Keep(MBObjectBase mbObject) Parameters mbObject MBObjectBase Sync(IDataStore) void Sync(IDataStore dataStore) Parameters dataStore IDataStore"
  },
  "api/Bannerlord.ButterLib.ObjectSystem.html": {
    "href": "api/Bannerlord.ButterLib.ObjectSystem.html",
    "title": "Namespace Bannerlord.ButterLib.ObjectSystem | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.ObjectSystem Interfaces IMBObjectFinder Finds MBObjectBase objects based on their MBGUID IMBObjectKeeper Keeps all MBObjectBase references for custom serialization"
  },
  "api/Bannerlord.ButterLib.Options.ButterLibOptions.html": {
    "href": "api/Bannerlord.ButterLib.Options.ButterLibOptions.html",
    "title": "Class ButterLibOptions | ButterLib Documentation",
    "keywords": "Class ButterLibOptions Namespace Bannerlord.ButterLib.Options Assembly Bannerlord.ButterLib.dll public sealed class ButterLibOptions Inheritance object ButterLibOptions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Properties MinLogLevel public int MinLogLevel { get; set; } Property Value int"
  },
  "api/Bannerlord.ButterLib.Options.html": {
    "href": "api/Bannerlord.ButterLib.Options.html",
    "title": "Namespace Bannerlord.ButterLib.Options | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.Options Classes ButterLibOptions"
  },
  "api/Bannerlord.ButterLib.SaveSystem.DictionaryToArrayConverter.html": {
    "href": "api/Bannerlord.ButterLib.SaveSystem.DictionaryToArrayConverter.html",
    "title": "Class DictionaryToArrayConverter | ButterLib Documentation",
    "keywords": "Class DictionaryToArrayConverter Namespace Bannerlord.ButterLib.SaveSystem Assembly Bannerlord.ButterLib.dll public sealed class DictionaryToArrayConverter : JsonConverter Inheritance object JsonConverter DictionaryToArrayConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Bannerlord.ButterLib.SaveSystem.Extensions.IDataStoreExtensions.html": {
    "href": "api/Bannerlord.ButterLib.SaveSystem.Extensions.IDataStoreExtensions.html",
    "title": "Class IDataStoreExtensions | ButterLib Documentation",
    "keywords": "Class IDataStoreExtensions Namespace Bannerlord.ButterLib.SaveSystem.Extensions Assembly Bannerlord.ButterLib.dll public static class IDataStoreExtensions Inheritance object IDataStoreExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods SyncDataAsJson<T>(IDataStore, string, ref T?, JsonSerializer) public static bool SyncDataAsJson<T>(this IDataStore dataStore, string key, ref T? data, JsonSerializer serializer) Parameters dataStore IDataStore key string data T serializer JsonSerializer Returns bool Type Parameters T SyncDataAsJson<T>(IDataStore, string, ref T?, JsonSerializerSettings?) public static bool SyncDataAsJson<T>(this IDataStore dataStore, string key, ref T? data, JsonSerializerSettings? settings = null) Parameters dataStore IDataStore key string data T settings JsonSerializerSettings Returns bool Type Parameters T"
  },
  "api/Bannerlord.ButterLib.SaveSystem.Extensions.html": {
    "href": "api/Bannerlord.ButterLib.SaveSystem.Extensions.html",
    "title": "Namespace Bannerlord.ButterLib.SaveSystem.Extensions | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.SaveSystem.Extensions Classes IDataStoreExtensions"
  },
  "api/Bannerlord.ButterLib.SaveSystem.MBGUIDConverter.html": {
    "href": "api/Bannerlord.ButterLib.SaveSystem.MBGUIDConverter.html",
    "title": "Class MBGUIDConverter | ButterLib Documentation",
    "keywords": "Class MBGUIDConverter Namespace Bannerlord.ButterLib.SaveSystem Assembly Bannerlord.ButterLib.dll public sealed class MBGUIDConverter : JsonConverter Inheritance object JsonConverter MBGUIDConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Bannerlord.ButterLib.SaveSystem.MBObjectBaseConverter.html": {
    "href": "api/Bannerlord.ButterLib.SaveSystem.MBObjectBaseConverter.html",
    "title": "Class MBObjectBaseConverter | ButterLib Documentation",
    "keywords": "Class MBObjectBaseConverter Namespace Bannerlord.ButterLib.SaveSystem Assembly Bannerlord.ButterLib.dll public sealed class MBObjectBaseConverter : JsonConverter Inheritance object JsonConverter MBObjectBaseConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/Bannerlord.ButterLib.SaveSystem.TaleWorldsContractResolver.html": {
    "href": "api/Bannerlord.ButterLib.SaveSystem.TaleWorldsContractResolver.html",
    "title": "Class TaleWorldsContractResolver | ButterLib Documentation",
    "keywords": "Class TaleWorldsContractResolver Namespace Bannerlord.ButterLib.SaveSystem Assembly Bannerlord.ButterLib.dll public class TaleWorldsContractResolver : TaleWorldsContractResolverBase, IContractResolver Inheritance object DefaultContractResolver TaleWorldsContractResolverBase TaleWorldsContractResolver Implements IContractResolver Inherited Members TaleWorldsContractResolverBase._isContainerDelegate TaleWorldsContractResolverBase.IsContainerFallback(Type) DefaultContractResolver.ResolveContract(Type) DefaultContractResolver.GetSerializableMembers(Type) DefaultContractResolver.CreateObjectContract(Type) DefaultContractResolver.CreateConstructorParameters(ConstructorInfo, JsonPropertyCollection) DefaultContractResolver.CreatePropertyFromConstructorParameter(JsonProperty, ParameterInfo) DefaultContractResolver.ResolveContractConverter(Type) DefaultContractResolver.CreateDictionaryContract(Type) DefaultContractResolver.CreateArrayContract(Type) DefaultContractResolver.CreatePrimitiveContract(Type) DefaultContractResolver.CreateLinqContract(Type) DefaultContractResolver.CreateISerializableContract(Type) DefaultContractResolver.CreateDynamicContract(Type) DefaultContractResolver.CreateStringContract(Type) DefaultContractResolver.CreateContract(Type) DefaultContractResolver.CreateMemberValueProvider(MemberInfo) DefaultContractResolver.CreateProperty(MemberInfo, MemberSerialization) DefaultContractResolver.ResolvePropertyName(string) DefaultContractResolver.ResolveExtensionDataName(string) DefaultContractResolver.ResolveDictionaryKey(string) DefaultContractResolver.GetResolvedPropertyName(string) DefaultContractResolver.DynamicCodeGeneration DefaultContractResolver.DefaultMembersSearchFlags DefaultContractResolver.SerializeCompilerGeneratedMembers DefaultContractResolver.IgnoreSerializableInterface DefaultContractResolver.IgnoreSerializableAttribute DefaultContractResolver.IgnoreIsSpecifiedMembers DefaultContractResolver.IgnoreShouldSerializeMembers DefaultContractResolver.NamingStrategy object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateProperties(Type, MemberSerialization) Creates properties for the given JsonContract. protected override IList<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization) Parameters type Type The type to create properties for. memberSerialization MemberSerialization The member serialization mode for the type. Returns IList<JsonProperty> Properties for the given JsonContract."
  },
  "api/Bannerlord.ButterLib.SaveSystem.TaleWorldsContractResolverBase.IsContainerDelegate.html": {
    "href": "api/Bannerlord.ButterLib.SaveSystem.TaleWorldsContractResolverBase.IsContainerDelegate.html",
    "title": "Delegate TaleWorldsContractResolverBase.IsContainerDelegate | ButterLib Documentation",
    "keywords": "Delegate TaleWorldsContractResolverBase.IsContainerDelegate Namespace Bannerlord.ButterLib.SaveSystem Assembly Bannerlord.ButterLib.dll protected delegate bool TaleWorldsContractResolverBase.IsContainerDelegate(Type type) Parameters type Type Returns bool"
  },
  "api/Bannerlord.ButterLib.SaveSystem.TaleWorldsContractResolverBase.html": {
    "href": "api/Bannerlord.ButterLib.SaveSystem.TaleWorldsContractResolverBase.html",
    "title": "Class TaleWorldsContractResolverBase | ButterLib Documentation",
    "keywords": "Class TaleWorldsContractResolverBase Namespace Bannerlord.ButterLib.SaveSystem Assembly Bannerlord.ButterLib.dll public class TaleWorldsContractResolverBase : DefaultContractResolver, IContractResolver Inheritance object DefaultContractResolver TaleWorldsContractResolverBase Implements IContractResolver Derived TaleWorldsContractResolver Inherited Members DefaultContractResolver.ResolveContract(Type) DefaultContractResolver.GetSerializableMembers(Type) DefaultContractResolver.CreateObjectContract(Type) DefaultContractResolver.CreateConstructorParameters(ConstructorInfo, JsonPropertyCollection) DefaultContractResolver.CreatePropertyFromConstructorParameter(JsonProperty, ParameterInfo) DefaultContractResolver.ResolveContractConverter(Type) DefaultContractResolver.CreateDictionaryContract(Type) DefaultContractResolver.CreateArrayContract(Type) DefaultContractResolver.CreatePrimitiveContract(Type) DefaultContractResolver.CreateLinqContract(Type) DefaultContractResolver.CreateISerializableContract(Type) DefaultContractResolver.CreateDynamicContract(Type) DefaultContractResolver.CreateStringContract(Type) DefaultContractResolver.CreateContract(Type) DefaultContractResolver.CreateProperties(Type, MemberSerialization) DefaultContractResolver.CreateMemberValueProvider(MemberInfo) DefaultContractResolver.CreateProperty(MemberInfo, MemberSerialization) DefaultContractResolver.ResolvePropertyName(string) DefaultContractResolver.ResolveExtensionDataName(string) DefaultContractResolver.ResolveDictionaryKey(string) DefaultContractResolver.GetResolvedPropertyName(string) DefaultContractResolver.DynamicCodeGeneration DefaultContractResolver.DefaultMembersSearchFlags DefaultContractResolver.SerializeCompilerGeneratedMembers DefaultContractResolver.IgnoreSerializableInterface DefaultContractResolver.IgnoreSerializableAttribute DefaultContractResolver.IgnoreIsSpecifiedMembers DefaultContractResolver.IgnoreShouldSerializeMembers DefaultContractResolver.NamingStrategy object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields _isContainerDelegate protected static readonly TaleWorldsContractResolverBase.IsContainerDelegate? _isContainerDelegate Field Value TaleWorldsContractResolverBase.IsContainerDelegate Methods IsContainerFallback(Type) protected static bool IsContainerFallback(Type type) Parameters type Type Returns bool"
  },
  "api/Bannerlord.ButterLib.SaveSystem.html": {
    "href": "api/Bannerlord.ButterLib.SaveSystem.html",
    "title": "Namespace Bannerlord.ButterLib.SaveSystem | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.SaveSystem Classes DictionaryToArrayConverter MBGUIDConverter MBObjectBaseConverter TaleWorldsContractResolver TaleWorldsContractResolverBase Delegates TaleWorldsContractResolverBase.IsContainerDelegate"
  },
  "api/Bannerlord.ButterLib.SubModuleWrappers2.MBSubModuleBaseListWrapper.html": {
    "href": "api/Bannerlord.ButterLib.SubModuleWrappers2.MBSubModuleBaseListWrapper.html",
    "title": "Class MBSubModuleBaseListWrapper | ButterLib Documentation",
    "keywords": "Class MBSubModuleBaseListWrapper Namespace Bannerlord.ButterLib.SubModuleWrappers2 Assembly Bannerlord.ButterLib.dll Wraps several MBSubModuleBase so when the game calls any method, it will be passed to its children. public class MBSubModuleBaseListWrapper : MBSubModuleBase Inheritance object MBSubModuleBase MBSubModuleBaseListWrapper Derived ImplementationLoaderSubModule Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<Assembly>) DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<string>?, Action<LoggerConfiguration>?) DependencyInjectionExtensions.GetServiceProvider(MBSubModuleBase) DependencyInjectionExtensions.GetServices(MBSubModuleBase) DependencyInjectionExtensions.GetTempServiceProvider(MBSubModuleBase) Fields _subModules protected readonly List<MBSubModuleBaseWrapper> _subModules Field Value List<MBSubModuleBaseWrapper> Properties SubModules public IReadOnlyList<MBSubModuleBaseWrapper> SubModules { get; } Property Value IReadOnlyList<MBSubModuleBaseWrapper> Methods AfterAsyncTickTick(float) public virtual void AfterAsyncTickTick(float dt) Parameters dt float AfterRegisterSubModuleObjects(bool) public virtual void AfterRegisterSubModuleObjects(bool isSavedCampaign) Parameters isSavedCampaign bool BeginGameStart(Game) public virtual void BeginGameStart(Game game) Parameters game Game DoLoading(Game) public virtual bool DoLoading(Game game) Parameters game Game Returns bool InitializeGameStarter(Game, IGameStarter) public virtual void InitializeGameStarter(Game game, IGameStarter starterObject) Parameters game Game starterObject IGameStarter OnAfterGameInitializationFinished(Game, object) public virtual void OnAfterGameInitializationFinished(Game game, object starterObject) Parameters game Game starterObject object OnApplicationTick(float) public virtual void OnApplicationTick(float dt) Parameters dt float OnBeforeInitialModuleScreenSetAsRoot() public virtual void OnBeforeInitialModuleScreenSetAsRoot() OnBeforeMissionBehaviorInitialize(Mission) public virtual void OnBeforeMissionBehaviorInitialize(Mission mission) Parameters mission Mission OnCampaignStart(Game, object) public virtual void OnCampaignStart(Game game, object starterObject) Parameters game Game starterObject object OnConfigChanged() public virtual void OnConfigChanged() OnGameEnd(Game) public virtual void OnGameEnd(Game game) Parameters game Game OnGameInitializationFinished(Game) public virtual void OnGameInitializationFinished(Game game) Parameters game Game OnGameLoaded(Game, object) public virtual void OnGameLoaded(Game game, object initializerObject) Parameters game Game initializerObject object OnGameStart(Game, IGameStarter) public virtual void OnGameStart(Game game, IGameStarter gameStarterObject) Parameters game Game gameStarterObject IGameStarter OnInitialState() public virtual void OnInitialState() OnMissionBehaviorInitialize(Mission) public virtual void OnMissionBehaviorInitialize(Mission mission) Parameters mission Mission OnMultiplayerGameStart(Game, object) public virtual void OnMultiplayerGameStart(Game game, object starterObject) Parameters game Game starterObject object OnNewGameCreated(Game, object) public virtual void OnNewGameCreated(Game game, object initializerObject) Parameters game Game initializerObject object OnServiceRegistration() public virtual void OnServiceRegistration() OnSubModuleLoad() public virtual void OnSubModuleLoad() OnSubModuleUnloaded() public virtual void OnSubModuleUnloaded() RegisterSubModuleObjects(bool) public virtual void RegisterSubModuleObjects(bool isSavedCampaign) Parameters isSavedCampaign bool"
  },
  "api/Bannerlord.ButterLib.SubModuleWrappers2.MBSubModuleBaseWrapper.html": {
    "href": "api/Bannerlord.ButterLib.SubModuleWrappers2.MBSubModuleBaseWrapper.html",
    "title": "Class MBSubModuleBaseWrapper | ButterLib Documentation",
    "keywords": "Class MBSubModuleBaseWrapper Namespace Bannerlord.ButterLib.SubModuleWrappers2 Assembly Bannerlord.ButterLib.dll Wraps a MBSubModuleBase so protected methods could be called without a performance hit public class MBSubModuleBaseWrapper : MBSubModuleBase Inheritance object MBSubModuleBase MBSubModuleBaseWrapper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<Assembly>) DependencyInjectionExtensions.AddSerilogLoggerProvider(MBSubModuleBase, string, IEnumerable<string>?, Action<LoggerConfiguration>?) DependencyInjectionExtensions.GetServiceProvider(MBSubModuleBase) DependencyInjectionExtensions.GetServices(MBSubModuleBase) DependencyInjectionExtensions.GetTempServiceProvider(MBSubModuleBase) Constructors MBSubModuleBaseWrapper(MBSubModuleBase) public MBSubModuleBaseWrapper(MBSubModuleBase subModule) Parameters subModule MBSubModuleBase Properties SubModule public MBSubModuleBase SubModule { get; } Property Value MBSubModuleBase Methods AfterAsyncTickTick(float) public virtual void AfterAsyncTickTick(float dt) Parameters dt float AfterRegisterSubModuleObjects(bool) public virtual void AfterRegisterSubModuleObjects(bool isSavedCampaign) Parameters isSavedCampaign bool BeginGameStart(Game) public virtual void BeginGameStart(Game game) Parameters game Game DoLoading(Game) public virtual bool DoLoading(Game game) Parameters game Game Returns bool InitializeGameStarter(Game, IGameStarter) public virtual void InitializeGameStarter(Game game, IGameStarter starterObject) Parameters game Game starterObject IGameStarter OnAfterGameInitializationFinished(Game, object) public virtual void OnAfterGameInitializationFinished(Game game, object starterObject) Parameters game Game starterObject object OnApplicationTick(float) public virtual void OnApplicationTick(float dt) Parameters dt float OnBeforeInitialModuleScreenSetAsRoot() public virtual void OnBeforeInitialModuleScreenSetAsRoot() OnBeforeMissionBehaviorInitialize(Mission) public virtual void OnBeforeMissionBehaviorInitialize(Mission mission) Parameters mission Mission OnCampaignStart(Game, object) public virtual void OnCampaignStart(Game game, object starterObject) Parameters game Game starterObject object OnConfigChanged() public virtual void OnConfigChanged() OnGameEnd(Game) public virtual void OnGameEnd(Game game) Parameters game Game OnGameInitializationFinished(Game) public virtual void OnGameInitializationFinished(Game game) Parameters game Game OnGameLoaded(Game, object) public virtual void OnGameLoaded(Game game, object initializerObject) Parameters game Game initializerObject object OnGameStart(Game, IGameStarter) public virtual void OnGameStart(Game game, IGameStarter gameStarterObject) Parameters game Game gameStarterObject IGameStarter OnInitialState() public virtual void OnInitialState() OnMissionBehaviorInitialize(Mission) public virtual void OnMissionBehaviorInitialize(Mission mission) Parameters mission Mission OnMultiplayerGameStart(Game, object) public virtual void OnMultiplayerGameStart(Game game, object starterObject) Parameters game Game starterObject object OnNewGameCreated(Game, object) public virtual void OnNewGameCreated(Game game, object initializerObject) Parameters game Game initializerObject object OnServiceRegistration() public virtual void OnServiceRegistration() OnSubModuleLoad() public virtual void OnSubModuleLoad() OnSubModuleUnloaded() public virtual void OnSubModuleUnloaded() RegisterSubModuleObjects(bool) public virtual void RegisterSubModuleObjects(bool isSavedCampaign) Parameters isSavedCampaign bool"
  },
  "api/Bannerlord.ButterLib.SubModuleWrappers2.html": {
    "href": "api/Bannerlord.ButterLib.SubModuleWrappers2.html",
    "title": "Namespace Bannerlord.ButterLib.SubModuleWrappers2 | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.SubModuleWrappers2 Classes MBSubModuleBaseListWrapper Wraps several MBSubModuleBase so when the game calls any method, it will be passed to its children. MBSubModuleBaseWrapper Wraps a MBSubModuleBase so protected methods could be called without a performance hit"
  },
  "api/Bannerlord.ButterLib.SubSystems.ISubSystem.html": {
    "href": "api/Bannerlord.ButterLib.SubSystems.ISubSystem.html",
    "title": "Interface ISubSystem | ButterLib Documentation",
    "keywords": "Interface ISubSystem Namespace Bannerlord.ButterLib.SubSystems Assembly Bannerlord.ButterLib.dll public interface ISubSystem Properties CanBeDisabled bool CanBeDisabled { get; } Property Value bool CanBeSwitchedAtRuntime bool CanBeSwitchedAtRuntime { get; } Property Value bool Description string Description { get; } Property Value string Id string Id { get; } Property Value string IsEnabled bool IsEnabled { get; } Property Value bool Name string Name { get; } Property Value string Methods Disable() void Disable() Enable() void Enable()"
  },
  "api/Bannerlord.ButterLib.SubSystems.Settings.ISubSystemSettings-1.html": {
    "href": "api/Bannerlord.ButterLib.SubSystems.Settings.ISubSystemSettings-1.html",
    "title": "Interface ISubSystemSettings<TSubSystem> | ButterLib Documentation",
    "keywords": "Interface ISubSystemSettings<TSubSystem> Namespace Bannerlord.ButterLib.SubSystems.Settings Assembly Bannerlord.ButterLib.dll An interface for foreign entities like MCM to get settings of the TSubSystem. public interface ISubSystemSettings<TSubSystem> where TSubSystem : ISubSystem Type Parameters TSubSystem The ISubSystem that exposes the settings. Properties Declarations List of the declarations of the settings. Currently supported are: Type Class Switch SubSystemSettingsPropertyBool<TSubSystem> Text SubSystemSettingsPropertyText<TSubSystem> Integer SubSystemSettingsPropertyInt<TSubSystem> Floating SubSystemSettingsPropertyFloat<TSubSystem> Dropdown SubSystemSettingsPropertyDropdown<TSubSystem> IReadOnlyCollection<SubSystemSettingsDeclaration<TSubSystem>> Declarations { get; } Property Value IReadOnlyCollection<SubSystemSettingsDeclaration<TSubSystem>>"
  },
  "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsDeclaration-1.html": {
    "href": "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsDeclaration-1.html",
    "title": "Class SubSystemSettingsDeclaration<TSubSystem> | ButterLib Documentation",
    "keywords": "Class SubSystemSettingsDeclaration<TSubSystem> Namespace Bannerlord.ButterLib.SubSystems.Settings Assembly Bannerlord.ButterLib.dll The basic declaration entity. public abstract record SubSystemSettingsDeclaration<TSubSystem> : IEquatable<SubSystemSettingsDeclaration<TSubSystem>> where TSubSystem : ISubSystem Type Parameters TSubSystem The ISubSystem that exposes the settings. Inheritance object SubSystemSettingsDeclaration<TSubSystem> Implements IEquatable<SubSystemSettingsDeclaration<TSubSystem>> Derived SubSystemSettingsProperty<TSubSystem, TProperty> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SubSystemSettingsDeclaration(string, string) The basic declaration entity. protected SubSystemSettingsDeclaration(string Name, string Description) Parameters Name string The name of the settings entry. Description string The description of the settings entry. Properties Description The description of the settings entry. public string Description { get; init; } Property Value string Name The name of the settings entry. public string Name { get; init; } Property Value string"
  },
  "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsProperty-2.html": {
    "href": "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsProperty-2.html",
    "title": "Class SubSystemSettingsProperty<TSubSystem, TProperty> | ButterLib Documentation",
    "keywords": "Class SubSystemSettingsProperty<TSubSystem, TProperty> Namespace Bannerlord.ButterLib.SubSystems.Settings Assembly Bannerlord.ButterLib.dll A property based declaration. public abstract record SubSystemSettingsProperty<TSubSystem, TProperty> : SubSystemSettingsDeclaration<TSubSystem>, IEquatable<SubSystemSettingsDeclaration<TSubSystem>>, IEquatable<SubSystemSettingsProperty<TSubSystem, TProperty>> where TSubSystem : ISubSystem Type Parameters TSubSystem The ISubSystem that exposes the settings. TProperty Type of the property. Inheritance object SubSystemSettingsDeclaration<TSubSystem> SubSystemSettingsProperty<TSubSystem, TProperty> Implements IEquatable<SubSystemSettingsDeclaration<TSubSystem>> IEquatable<SubSystemSettingsProperty<TSubSystem, TProperty>> Derived SubSystemSettingsPropertyBool<TSubSystem> SubSystemSettingsPropertyDropdown<TSubSystem> SubSystemSettingsPropertyFloat<TSubSystem> SubSystemSettingsPropertyInt<TSubSystem> SubSystemSettingsPropertyText<TSubSystem> Inherited Members SubSystemSettingsDeclaration<TSubSystem>.Name SubSystemSettingsDeclaration<TSubSystem>.Description object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SubSystemSettingsProperty(string, string, Expression<Func<TSubSystem, TProperty>>) A property based declaration. protected SubSystemSettingsProperty(string Name, string Description, Expression<Func<TSubSystem, TProperty>> Property) Parameters Name string The name of the settings entry. Description string The description of the settings entry. Property Expression<Func<TSubSystem, TProperty>> And expression that references the property. Properties Property And expression that references the property. public Expression<Func<TSubSystem, TProperty>> Property { get; init; } Property Value Expression<Func<TSubSystem, TProperty>>"
  },
  "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsPropertyBool-1.html": {
    "href": "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsPropertyBool-1.html",
    "title": "Class SubSystemSettingsPropertyBool<TSubSystem> | ButterLib Documentation",
    "keywords": "Class SubSystemSettingsPropertyBool<TSubSystem> Namespace Bannerlord.ButterLib.SubSystems.Settings Assembly Bannerlord.ButterLib.dll A property based declaration. public record SubSystemSettingsPropertyBool<TSubSystem> : SubSystemSettingsProperty<TSubSystem, bool>, IEquatable<SubSystemSettingsDeclaration<TSubSystem>>, IEquatable<SubSystemSettingsProperty<TSubSystem, bool>>, IEquatable<SubSystemSettingsPropertyBool<TSubSystem>> where TSubSystem : ISubSystem Type Parameters TSubSystem The ISubSystem that exposes the settings. Inheritance object SubSystemSettingsDeclaration<TSubSystem> SubSystemSettingsProperty<TSubSystem, bool> SubSystemSettingsPropertyBool<TSubSystem> Implements IEquatable<SubSystemSettingsDeclaration<TSubSystem>> IEquatable<SubSystemSettingsProperty<TSubSystem, bool>> IEquatable<SubSystemSettingsPropertyBool<TSubSystem>> Inherited Members SubSystemSettingsProperty<TSubSystem, bool>.Property SubSystemSettingsDeclaration<TSubSystem>.Name SubSystemSettingsDeclaration<TSubSystem>.Description object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SubSystemSettingsPropertyBool(string, string, Expression<Func<TSubSystem, bool>>) A property based declaration. public SubSystemSettingsPropertyBool(string Name, string Description, Expression<Func<TSubSystem, bool>> Property) Parameters Name string The name of the settings entry. Description string The description of the settings entry. Property Expression<Func<TSubSystem, bool>> And expression that references the property."
  },
  "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsPropertyDropdown-1.html": {
    "href": "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsPropertyDropdown-1.html",
    "title": "Class SubSystemSettingsPropertyDropdown<TSubSystem> | ButterLib Documentation",
    "keywords": "Class SubSystemSettingsPropertyDropdown<TSubSystem> Namespace Bannerlord.ButterLib.SubSystems.Settings Assembly Bannerlord.ButterLib.dll A property based declaration. public record SubSystemSettingsPropertyDropdown<TSubSystem> : SubSystemSettingsProperty<TSubSystem, IList<string>>, IEquatable<SubSystemSettingsDeclaration<TSubSystem>>, IEquatable<SubSystemSettingsProperty<TSubSystem, IList<string>>>, IEquatable<SubSystemSettingsPropertyDropdown<TSubSystem>> where TSubSystem : ISubSystem Type Parameters TSubSystem The ISubSystem that exposes the settings. Inheritance object SubSystemSettingsDeclaration<TSubSystem> SubSystemSettingsProperty<TSubSystem, IList<string>> SubSystemSettingsPropertyDropdown<TSubSystem> Implements IEquatable<SubSystemSettingsDeclaration<TSubSystem>> IEquatable<SubSystemSettingsProperty<TSubSystem, IList<string>>> IEquatable<SubSystemSettingsPropertyDropdown<TSubSystem>> Inherited Members SubSystemSettingsProperty<TSubSystem, IList<string>>.Property SubSystemSettingsDeclaration<TSubSystem>.Name SubSystemSettingsDeclaration<TSubSystem>.Description object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SubSystemSettingsPropertyDropdown(string, string, Expression<Func<TSubSystem, IList<string>>>, int) IList<string> public SubSystemSettingsPropertyDropdown(string Name, string Description, Expression<Func<TSubSystem, IList<string>>> Property, int SelectedIndex) Parameters Name string Description string Property Expression<Func<TSubSystem, IList<string>>> SelectedIndex int Properties SelectedIndex public int SelectedIndex { get; set; } Property Value int"
  },
  "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsPropertyFloat-1.html": {
    "href": "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsPropertyFloat-1.html",
    "title": "Class SubSystemSettingsPropertyFloat<TSubSystem> | ButterLib Documentation",
    "keywords": "Class SubSystemSettingsPropertyFloat<TSubSystem> Namespace Bannerlord.ButterLib.SubSystems.Settings Assembly Bannerlord.ButterLib.dll A property based declaration. public record SubSystemSettingsPropertyFloat<TSubSystem> : SubSystemSettingsProperty<TSubSystem, float>, IEquatable<SubSystemSettingsDeclaration<TSubSystem>>, IEquatable<SubSystemSettingsProperty<TSubSystem, float>>, IEquatable<SubSystemSettingsPropertyFloat<TSubSystem>> where TSubSystem : ISubSystem Type Parameters TSubSystem The ISubSystem that exposes the settings. Inheritance object SubSystemSettingsDeclaration<TSubSystem> SubSystemSettingsProperty<TSubSystem, float> SubSystemSettingsPropertyFloat<TSubSystem> Implements IEquatable<SubSystemSettingsDeclaration<TSubSystem>> IEquatable<SubSystemSettingsProperty<TSubSystem, float>> IEquatable<SubSystemSettingsPropertyFloat<TSubSystem>> Inherited Members SubSystemSettingsProperty<TSubSystem, float>.Property SubSystemSettingsDeclaration<TSubSystem>.Name SubSystemSettingsDeclaration<TSubSystem>.Description object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SubSystemSettingsPropertyFloat(string, string, Expression<Func<TSubSystem, float>>, float, float) A numeric based on a float property. public SubSystemSettingsPropertyFloat(string Name, string Description, Expression<Func<TSubSystem, float>> Property, float MinValue, float MaxValue) Parameters Name string Description string Property Expression<Func<TSubSystem, float>> MinValue float MaxValue float Properties MaxValue public float MaxValue { get; init; } Property Value float MinValue public float MinValue { get; init; } Property Value float"
  },
  "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsPropertyInt-1.html": {
    "href": "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsPropertyInt-1.html",
    "title": "Class SubSystemSettingsPropertyInt<TSubSystem> | ButterLib Documentation",
    "keywords": "Class SubSystemSettingsPropertyInt<TSubSystem> Namespace Bannerlord.ButterLib.SubSystems.Settings Assembly Bannerlord.ButterLib.dll A property based declaration. public record SubSystemSettingsPropertyInt<TSubSystem> : SubSystemSettingsProperty<TSubSystem, int>, IEquatable<SubSystemSettingsDeclaration<TSubSystem>>, IEquatable<SubSystemSettingsProperty<TSubSystem, int>>, IEquatable<SubSystemSettingsPropertyInt<TSubSystem>> where TSubSystem : ISubSystem Type Parameters TSubSystem The ISubSystem that exposes the settings. Inheritance object SubSystemSettingsDeclaration<TSubSystem> SubSystemSettingsProperty<TSubSystem, int> SubSystemSettingsPropertyInt<TSubSystem> Implements IEquatable<SubSystemSettingsDeclaration<TSubSystem>> IEquatable<SubSystemSettingsProperty<TSubSystem, int>> IEquatable<SubSystemSettingsPropertyInt<TSubSystem>> Inherited Members SubSystemSettingsProperty<TSubSystem, int>.Property SubSystemSettingsDeclaration<TSubSystem>.Name SubSystemSettingsDeclaration<TSubSystem>.Description object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SubSystemSettingsPropertyInt(string, string, Expression<Func<TSubSystem, int>>, int, int) A numeric based on a float property. public SubSystemSettingsPropertyInt(string Name, string Description, Expression<Func<TSubSystem, int>> Property, int MinValue, int MaxValue) Parameters Name string Description string Property Expression<Func<TSubSystem, int>> MinValue int MaxValue int Properties MaxValue public int MaxValue { get; init; } Property Value int MinValue public int MinValue { get; init; } Property Value int"
  },
  "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsPropertyText-1.html": {
    "href": "api/Bannerlord.ButterLib.SubSystems.Settings.SubSystemSettingsPropertyText-1.html",
    "title": "Class SubSystemSettingsPropertyText<TSubSystem> | ButterLib Documentation",
    "keywords": "Class SubSystemSettingsPropertyText<TSubSystem> Namespace Bannerlord.ButterLib.SubSystems.Settings Assembly Bannerlord.ButterLib.dll A property based declaration. public record SubSystemSettingsPropertyText<TSubSystem> : SubSystemSettingsProperty<TSubSystem, string>, IEquatable<SubSystemSettingsDeclaration<TSubSystem>>, IEquatable<SubSystemSettingsProperty<TSubSystem, string>>, IEquatable<SubSystemSettingsPropertyText<TSubSystem>> where TSubSystem : ISubSystem Type Parameters TSubSystem The ISubSystem that exposes the settings. Inheritance object SubSystemSettingsDeclaration<TSubSystem> SubSystemSettingsProperty<TSubSystem, string> SubSystemSettingsPropertyText<TSubSystem> Implements IEquatable<SubSystemSettingsDeclaration<TSubSystem>> IEquatable<SubSystemSettingsProperty<TSubSystem, string>> IEquatable<SubSystemSettingsPropertyText<TSubSystem>> Inherited Members SubSystemSettingsProperty<TSubSystem, string>.Property SubSystemSettingsDeclaration<TSubSystem>.Name SubSystemSettingsDeclaration<TSubSystem>.Description object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SubSystemSettingsPropertyText(string, string, Expression<Func<TSubSystem, string>>) A property based declaration. public SubSystemSettingsPropertyText(string Name, string Description, Expression<Func<TSubSystem, string>> Property) Parameters Name string The name of the settings entry. Description string The description of the settings entry. Property Expression<Func<TSubSystem, string>> And expression that references the property."
  },
  "api/Bannerlord.ButterLib.SubSystems.Settings.html": {
    "href": "api/Bannerlord.ButterLib.SubSystems.Settings.html",
    "title": "Namespace Bannerlord.ButterLib.SubSystems.Settings | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.SubSystems.Settings Classes SubSystemSettingsDeclaration<TSubSystem> The basic declaration entity. SubSystemSettingsPropertyBool<TSubSystem> A property based declaration. SubSystemSettingsPropertyDropdown<TSubSystem> A property based declaration. SubSystemSettingsPropertyFloat<TSubSystem> A property based declaration. SubSystemSettingsPropertyInt<TSubSystem> A property based declaration. SubSystemSettingsPropertyText<TSubSystem> A property based declaration. SubSystemSettingsProperty<TSubSystem, TProperty> A property based declaration. Interfaces ISubSystemSettings<TSubSystem> An interface for foreign entities like MCM to get settings of the TSubSystem."
  },
  "api/Bannerlord.ButterLib.SubSystems.html": {
    "href": "api/Bannerlord.ButterLib.SubSystems.html",
    "title": "Namespace Bannerlord.ButterLib.SubSystems | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib.SubSystems Interfaces ISubSystem"
  },
  "api/Bannerlord.ButterLib.html": {
    "href": "api/Bannerlord.ButterLib.html",
    "title": "Namespace Bannerlord.ButterLib | ButterLib Documentation",
    "keywords": "Namespace Bannerlord.ButterLib Classes ButterLibSaveableTypeDefiner Base class of ButterLib's saving system. ButterLibSubModule Main SubModule. Performs initialization of all 3 stages. ImplementationLoaderSubModule Loads all ButterLib's implementation libraries that are supported by the game."
  },
  "articles/AssemblyVerifier/Overview.html": {
    "href": "articles/AssemblyVerifier/Overview.html",
    "title": "| ButterLib Documentation",
    "keywords": "Important This SubSystem is obsolete! AssemblyVerifier used to give the ability to pre-load an assembly and check if it's compatible with the game by calling Assembly.GetTypes(). This feature is obsolete and no longer supported. string dependencyPath; string assemblyPath; using var verifier = new AssemblyVerifier(\"Test\"); var loader = verifier.GetLoader(out var exception); // The AssemblyVerifier will have every loaded assembly by the game within itself. // You can load additional assemblies if needed. loader.LoadFile(dependencyPath); var isCompatible = loader.LoadFileAndTest(assemblyPath);"
  },
  "articles/CampaignIdentifier/Overview.html": {
    "href": "articles/CampaignIdentifier/Overview.html",
    "title": "| ButterLib Documentation",
    "keywords": "Important This SubSystem is obsolete! CampaignIdentifier used to associate unique string ID with every campaign basing on the initial character. This feature is obsolete and no longer supported. // Get current campaign ID string campaignID = Camapaign.Current.GetCampaignId(); // Get current campaign descriptor var campaignDescriptor = Camapaign.Current.GetCampaignDescriptor();"
  },
  "articles/Common/Extensions/Overview.html": {
    "href": "articles/Common/Extensions/Overview.html",
    "title": "Common Extension Methods | ButterLib Documentation",
    "keywords": "Common Extension Methods Below are the common extensions provided by the ButterLib. ApplicationVersionExtensions CampaignExtensions DependencyInjectionExtensions MbEventExtensions"
  },
  "articles/Common/Helpers/Overview.html": {
    "href": "articles/Common/Helpers/Overview.html",
    "title": "Common Helper Methods | ButterLib Documentation",
    "keywords": "Common Helper Methods Below are the common helpers provided by the ButterLib. ApplicationVersionComparer ElegantPairHelper"
  },
  "articles/Common/index.html": {
    "href": "articles/Common/index.html",
    "title": "| ButterLib Documentation",
    "keywords": ""
  },
  "articles/DelayedSubModule/Overview.html": {
    "href": "articles/DelayedSubModule/Overview.html",
    "title": "| ButterLib Documentation",
    "keywords": "Consider this case: You have a piece of code that should be executed after some SubModule, e.g. StoryModeSubModule, but you don't want to add StoryMode as a DependedModule. This is not supported out-of-the-box, but ButterLib provides one possible solution. protected override void OnSubModuleLoad() { base.OnSubModuleLoad(); // You first call Register() so the SubModule will be tracked by ButterLib DelayedSubModuleManager.Register<StoryModeSubModule>(); // You subscribe to the module's method call. // In this case, we do something after StoryModeSubModule.OnSubModuleLoad // is executed. DelayedSubModuleManager.Subscribe<StoryModeSubModule, SubModule>( nameof(OnSubModuleLoad), SubscriptionType.AfterMethod, (s, e) => { // StoryModeSubModule does not implement OnSubModuleLoad(), // so we can only catch the base virtual method call. if (e.IsBase) return; // SOME CODE }); } protected override void OnBeforeInitialModuleScreenSetAsRoot() { base.OnBeforeInitialModuleScreenSetAsRoot(); DelayedSubModuleManager.Register<GauntletUISubModule>(); DelayedSubModuleManager.Subscribe<GauntletUISubModule, SubModule>( nameof(OnBeforeInitialModuleScreenSetAsRoot), SubscriptionType.AfterMethod, (s, e) => { // GauntletUISubModule overrides OnBeforeInitialModuleScreenSetAsRoot, so we can // catch the override method call. if (!e.IsBase) return; // SOME CODE }); } Note: If for some reason your Module will load after the Module that you subscribed to, the delegate you passed in Subscribe will be executed immediately. If a derived MBSubModuleBase class overrides the method you subcsribe to and calls the base.Method(), you will get two calls, one from the override and one from calling the empty virtual method. Don't forget to filter by SubscriptionEventArgs.IsBase. The current implementation does not allow to subscribe to methods e.g. OnBeforeInitialModuleScreenSetAsRoot() outside the OnBeforeInitialModuleScreenSetAsRoot() override. You will not be able to subscribe to OnBeforeInitialModuleScreenSetAsRoot() in OnSubModuleLoad() override and vise-versa."
  },
  "articles/Development/Overview.html": {
    "href": "articles/Development/Overview.html",
    "title": "| ButterLib Documentation",
    "keywords": "Warning This article is an work in progress! Used Terminology: Game Reference Assemblies - Game Stable Version - Game Beta Version - Used Environment Variables: GITHUB_ACTIONS - used to indicate that the current environment is a CI. BANNERLORD_GAME_DIR - path to the Bannerlord game directory. There are also two additional game path variables, used in the case when you can setup two game installations - the current Stable game version and the current Beta game version. BANNERLORD_STABLE_DIR - points to the Stable game installation. BANNERLORD_BETA_DIR - points to the Beta game installation. An example of such case is to buy the game on Steam and GOG. Steam provides a Beta version, while GOG provides the Stable one. Solution The solution (Bannerlord.ButterLib.sln) has 4 configurations available. Stable Debug Stable Release Beta Debug Beta Release They are used to the full potential if you have set up the additional variables BANNERLORD_STABLE_DIR and BANNERLORD_BETA_DIR. Basically, when a Stable configuration is chosen, the modules will be copied after the project build into %Stable Game Path%/Modules. Same with Beta, will be copied into %Beta Game Path%/Modules. When those variables are not provided, the BANNERLORD_GAME_DIR is used for both. This means that in both configurations the modules will be copied to the same game installations for Stable and Beta game versions. supported-game-versions.txt This is a TXT file that contains all supported game version by ButterLib currently, in specific order: First version entry is the current Beta. Second is the current Stable. Last is the minimal version supported. Everything in-between can be in any order. The solution parses the file and uses the version to get the right Game Reference Assemblies to build against."
  },
  "articles/DistanceMatrix/Overview.html": {
    "href": "articles/DistanceMatrix/Overview.html",
    "title": "Distance Matrix | ButterLib Documentation",
    "keywords": "Distance Matrix Distance Matrix is a subsystem that provides a means for handling distances between various MBObjectBase objects in the game. You can use it to create your own implementations for the types you need. Additionally, there are built-in implementations for Settlement, Clan, and Kingdom types, along with a behavior to keep the distances updated. Usage Use DistanceMatrix<T> class to work with your custom distance matrix. Use CampaignExtensions to access the built-in implementations. If you plan to use built-in implementations and behavior, don't forget to enable the SubSystem in your SubModule class: if (this.GetServiceProvider() is { } serviceProvider) { var distanceMatrixSubSystem = serviceProvider.GetSubSystem(\"Distance Matrix\"); distanceMatrixSubSystem?.Enable(); } Example usage of built-in DistanceMatrix for Clan type: var clanDistanceMatrix = Campaign.Current.GetDefaultClanDistanceMatrix(); var playerClan = Clan.PlayerClan; var playerNeighbours = clanDistanceMatrix.GetNearestNeighbours(playerClan, 10); Clan inquiredClan = Clan.All.FirstOrDefault(clan => clan.Fiefs.Count > 0 && Clan.All.Any(x => x.Fiefs.Count > 0 && clan.MapFaction.IsAtWarWith(x.MapFaction))); var unfriendlyNeighbours = clanDistanceMatrix.GetNearestNeighbours(inquiredObject: inquiredClan, 20, x => !float.IsNaN(x.Distance) && x.OtherObject != inquiredClan && x.OtherObject.MapFaction.IsAtWarWith(inquiredClan.MapFaction)).ToList(); var unfriendlyNeighboursN = clanDistanceMatrix.GetNearestNeighboursNormalized(inquiredObject: inquiredClan, 20, x => !float.IsNaN(x.Distance) && x.OtherObject != inquiredClan && x.OtherObject.MapFaction.IsAtWarWith(inquiredClan.MapFaction)).ToList(); Example usage of Distance Matrix with custom selector and distance calculator: //Gives same result as Campaign.Current.GetDefaultClanDistanceMatrix(); //...or Campaign.Current.GetCampaignBehavior<GeopoliticsBehavior>().ClanDistanceMatrix; var settlementDistanceMatrix = Campaign.Current.GetCampaignBehavior<GeopoliticsBehavior>().SettlementDistanceMatrix ?? new DistanceMatrixImplementation<Settlement>(); var clanDistanceMatrix = DistanceMatrix<Clan>.Create(() => Clan.All.Where(x => !x.IsEliminated && !x.IsBanditFaction), (clan, otherClan, args) => { if (args != null && args.Length == 1 && args[0] is Dictionary<ulong, WeightedDistance> lst) { return ButterLib.DistanceMatrix.DistanceMatrix.CalculateDistanceBetweenClans(clan, otherClan, lst).GetValueOrDefault(); } return float.NaN; }, [ButterLib.DistanceMatrix.DistanceMatrix.GetSettlementOwnersPairedList(settlementDistanceMatrix!)!]);"
  },
  "articles/HotKeys/Overview.html": {
    "href": "articles/HotKeys/Overview.html",
    "title": "HotKeys | ButterLib Documentation",
    "keywords": "HotKeys The HotKeyManager type and associated views and functionality inside of Bannerlord is incredibly convoluted to work with, there are lots of gotchas and having conflicts between different mods registering hotkeys with the same ID's or mod names is almost a certainty, so this simple wrapper around it was created that handles the finer details and handles input polling so the entire thing is event based. Usage public class MySubModule : MBSubModuleBase { private bool _campaignIsStarted; protected override void OnBeforeInitialModuleScreenSetAsRoot() { // Create a new HotKeyManager for your mod. var hkm = HotKeyManager.Create(\"MyMod\"); // Add your HotKeyBase derived class to the manager. // You can add as many hotkeys as you'd like before building them up. // You can also use `hkm.Add(new TestKey(SomeExampleArgument))` if you'd like to have a non-default constructor. var rslt = hkm.Add<TestKey1>(); // var rslt = hkm.Add<TestKey2>(); // It's not necessary to supply a predicate, it's just a convenience. // You can also manually set IsEnabled to more simply enable/disable a keys functionality. rslt.Predicate = () => _campaignIsStarted; // Subscribe to each of the events on the hotkey at any time. rslt.OnReleasedEvent += () => InformationManager.DisplayMessage(new InformationMessage(\"Test Key Released!\", Colors.Magenta)); // Call this to build up all the hotkeys you added. hkm.Build(); } protected override void OnGameStart(Game game, IGameStarter gameStarterObject) { // An example just to demonstrate functionality. if (game.GameType is Campaign) _campaignIsStarted = true; } } public class TestKey1 : HotKeyBase { protected override string DisplayName { get; } protected override string Description { get; } protected override InputKey DefaultKey { get; } protected override string Category { get; } public TestKey1() : base(nameof(TestKey1)) { DisplayName = \"My Test Key\"; Description = \"This is a test key.\"; DefaultKey = InputKey.Comma; Category = HotKeyManager.Categories[HotKeyCategory.CampaignMap]; } protected override void OnReleased() { // You can also override methods relating to keypresses within the key itself. } } public class TestKey2 : HotKeyBase { public TestKey2() : base(nameof(TestKey2), \"My Test Key\", \"This is a test key.\", InputKey.Comma, HotKeyManager.Categories[HotKeyCategory.CampaignMap]) { } protected override void OnReleased() { // You can also override methods relating to keypresses within the key itself. } } Credit Original code taken from BannerLib by sirdoombox."
  },
  "articles/MBSubModuleBaseExtended/Overview.html": {
    "href": "articles/MBSubModuleBaseExtended/Overview.html",
    "title": "MBSubModuleBase extended | ButterLib Documentation",
    "keywords": "MBSubModuleBase extended Introduces an interface to use in your MBSubModuleBase-derived class, that provides new SubModule events for additional control over crucial parts of game and campaign loading or unloading. Usage To access additional events you should derive your submodule from MBSubModuleBaseEx instead of MBSubModuleBase. public class SubModule : MBSubModuleBaseEx { public override void OnAllSubModulesUnLoaded() { base.OnAllSubModulesUnLoaded(); } public override void OnBeforeInitialModuleScreenSetAsRootDelayed() { base.OnBeforeInitialModuleScreenSetAsRootDelayed(); } public override void OnGameStartDelayed(Game game, IGameStarter gameStarterObject) { base.OnGameStartDelayed(game, gameStarterObject); } public override void OnGameEndDelayed(Game game) { base.OnGameEndDelayed(game); } } Alternatively, you can derive directly from the IMBSubModuleBaseEx interface. This way you can derive from other virual or abstract classes and still access all the additional events, introduced by the MBSubModuleBase extended. public class SubModule : MBSubModuleBaseWrapper, IMBSubModuleBaseEx { public void OnAllSubModulesUnLoaded() { //Leave empty or add an implementation here } public void OnBeforeInitialModuleScreenSetAsRootDelayed() { //Leave empty or add an implementation here } public void OnGameStartDelayed(Game game, IGameStarter gameStarterObject) { //Leave empty or add an implementation here } public void OnGameEndDelayed(Game game) { //Leave empty or add an implementation here } }"
  },
  "articles/Optional/DependencyInjection/Initialization-Stages.html": {
    "href": "articles/Optional/DependencyInjection/Initialization-Stages.html",
    "title": "| ButterLib Documentation",
    "keywords": "Initialization Stages: Stage 1 - PreInitialization - Before ButterLib is processed by the game. Developers can inject into ButterLib via ButterLibSubModule.ConfigureBeforeInitialization(). Stage starts after the game starts loading SubModules. Stage ends when the game calls ButterLibSubModule.OnSubModuleLoad(). Stage 2 - Initialization - any MBSubModuleBase can register their own services. Stage starts after the game calls ButterLibSubModule.OnSubModuleLoad(). Stage ends when the game calls ButterLibSubModule.OnBeforeInitialModuleScreenSetAsRoot(). Stage 3 - PostInitialization - Services can be discovered by any MBSubModuleBase. Stage starts after the game calls ButterLibSubModule.OnBeforeInitialModuleScreenSetAsRoot()."
  },
  "articles/Optional/DependencyInjection/Overview.html": {
    "href": "articles/Optional/DependencyInjection/Overview.html",
    "title": "| ButterLib Documentation",
    "keywords": "This is an optional implementation of the new Dependency Injection framework created for .NET Core based on ServiceCollection. You are not required to use it. We have made sure that it does not leak into any classes ButterLib provides for the developers when using ButterLib as a standard library."
  },
  "articles/Optional/DependencyInjection/Stage-1.html": {
    "href": "articles/Optional/DependencyInjection/Stage-1.html",
    "title": "| ButterLib Documentation",
    "keywords": "This is the stage before ButterLib gets the opportunity to do the first initialization steps. It is useful for overriding ButterLib's default behavior. MBSubModuleBase.GetServices() is not available at this stage. Right now ButterLib is loading it's options from a fixed file. This can be overriden, so the config file would be loaded from another place, e.g from MCM's ModOptions folder."
  },
  "articles/Optional/DependencyInjection/Stage-2.html": {
    "href": "articles/Optional/DependencyInjection/Stage-2.html",
    "title": "| ButterLib Documentation",
    "keywords": "This is the intermediate stage when SubModules register their services. Because the IServiceProvider is not yet available, it is not possible to the the full ILogger implementation at this stage. You can call MBSubModuleBase.GetTempServiceProvider() to get the temporary IServiceProvider and resolve ILogger while logging anything at this stage. Do not forget to replace your ILogger at Stage 3."
  },
  "articles/Optional/DependencyInjection/Stage-3.html": {
    "href": "articles/Optional/DependencyInjection/Stage-3.html",
    "title": "| ButterLib Documentation",
    "keywords": "The last stage. ButterLib will create a permanent IServiceProvider for usage. MBSubModuleBase.GetServices() will not be available anymore, thus disabling any configuration/service registering. There's also a substage. When Creating/Loading a Campaign, the IServiceProvider will create a scope that will span across the whole Campiagn. Should be userful for per-campaign services."
  },
  "articles/Optional/Logging/Overview.html": {
    "href": "articles/Optional/Logging/Overview.html",
    "title": "| ButterLib Documentation",
    "keywords": "By default, the ILogger implementation will write it's logs in %GAME CONFIG%/ModLogs/default*.log. You can create your own log file with this code: this.AddSerilogLoggerProvider(\"FILENAME.txt\", new[] { FILTER }); // EXAMPLE: this.AddSerilogLoggerProvider($\"butterlib_{DateTimeOffset.Now:yyyyMMdd_HHmmss}.txt\", new[] { \"Bannerlord.ButterLib.*\" }); Any log from a class from namespace Bannerlord.ButterLib.* will be written to the default*.log file and to your own file."
  },
  "articles/Optional/index.html": {
    "href": "articles/Optional/index.html",
    "title": "| ButterLib Documentation",
    "keywords": ""
  },
  "articles/SaveSystem/Overview.html": {
    "href": "articles/SaveSystem/Overview.html",
    "title": "Save System | ButterLib Documentation",
    "keywords": "Save System SaveSystem provides wrappers and extensions to the game's save system. The Old Way To sync your custom data to savegames, you need to define a CampaignBehaviorBase and override its SyncData(IDataStore dataStore) method. From there, you'd make one or more calls to dataStore.SyncData<T>(string key, ref T myObject) to actually synchronize the data to the savegame. This seems dandy right up until you realize that it's actually quite a pain in practice, because in many cases, SyncData<T> will not only fail to work correctly with some standard types (e.g., simple containers like Dictionary<string, string> but also the game's implementation will often force the save files to depend upon your mod being loaded — not to mention the need to define your own SaveableTypeDefiner and pick arbitrary unique \"base IDs\" for your mod just to get anything done. If the save file ends up depending upon your mod being loaded, then your users are unnecessarily screwed when they disable it. In short, the old way is a pretty decent try, but it falls short on safely removing your mod from a savegame in all cases, the general amount of error-prone configuration required, too many of your wasted hours trying to synchronize data types that should obviously be handled by default but simply aren't, and wasted time marshalling things like MBGUIDs back to object references. The New Way: SyncDataAsJson We've developed a drop-in replacement for the aforementioned SyncData<T>: SyncDataAsJson<T>. It doesn't suffer from any of the aforementioned issues, and as an extension method of IDataStore, you use it exactly like you would've used SyncData<T>. However, your custom data is now, behind the scenes, serialized by ButterLib into a simple string (or similar primitive type). SyncDataAsJson<T> doing its own serialization to a primitive type behind the scenes means: Your mod will never save custom data that prevents the game from loading properly when your mod is disabled You will never need to define another SaveableTypeDefiner Far more standard types, especially involving standard containers, will be handled automatically, and in the off chance that they aren't, you (and we) have the power to add custom type serializers. You will never again need to manually save MBGUID values or manually restore them to MBObjectBase-derived object references in order to properly save, say, a Clan reference again. The serialization engine, Newtonsoft.Json, in order to allow SyncDataAsJson<T> to operate as a drop-in replacement for the old method, has been outfit with a custom contract resolver and a number of special type converters. The engine's custom contract resolver will only serialize data tagged with the TaleWorlds SaveableField or SaveableProperty attributes. Likewise, custom types intended for serialization must still use the SaveableClass or SaveableStruct attributes. Note that the ID numbers required by these attributes are an artifact of the old system and don't actually matter to SyncDataAsJson<T>, but you're advised to fill them out like normal for new types in the event that you need to go back to SyncData<T> for some reason. An example usage follows. Remember, the only thing that's really changed here is using SyncDataAsJson<T> instead of SyncData<T>. using Bannerlord.ButterLib.SaveSystem.Extensions; public class CustomBehavior : CampaignBehaviorBase { public override void SyncData(IDataStore dataStore) { dataStore.SyncDataAsJson(\"KeyForMyClass\", ref _myClassObj); // ... perhaps more SyncDataAsJson calls for other data ... } [Serializable] // If the struct/class has the Serializable attribute`SaveableField and SaveableProperty will be ignored public MyStruct { public int X; public int Y; public int Z; } private MyClass // Why private? Just to point out that access levels aren't an issue. { public int _unsavedField = 42; [SaveableField(1)] public Dictionary<Hero, int> _heroButterGiftAmounts = new Dictionary<Hero, int>(); [SaveableProperty(2)] public string Name { get; set; } = \"The Butter Lord\"; } private MyClass _myClassObj = new MyClass(); // ... other campaign behavior code to, presumably, give a lot of butter away everyday } This extension is the next step in the evolution of best practices and just plain less frustrating practices for the synchronization of your mod's custom data to savegames. Notes: Built-in MBObjectBase-derived types (e.g., Hero or Town) have a custom converter. They are serialized as their Id property. MBObjectManager is used to resolve these numeric IDs to the correct, live game object references at deserialization time. Custom MBObjectBase types are not serialized (i.e., custom types derived from MBObjectBase that aren't registered with the game's official object manager). While we do not know if such types even exist, we consider this to be non-ideal and intend to fix it in the future for completeness. One of the proposed solutions is to have our own registry of such custom objects and to resolve them from it — basically a custom MBObjectManager."
  },
  "articles/SubModuleWrappers/Overview.html": {
    "href": "articles/SubModuleWrappers/Overview.html",
    "title": "| ButterLib Documentation",
    "keywords": "MBSubModuleBaseWrapper Wraps a MBSubModuleBase and gives the ability to easy call the protected internal methods like OnSubModuleLoad(). MBSubModuleBaseListWrapper The same as previous, wraps multiple MBSubModuleBase instead of one. Usage MBSubModuleBaseListWrapper could be used if you need to dynamically load specific SubModules based on some condition. You need to create a MBSubModuleBase class that derives from MBSubModuleBaseListWrapper, in which you decide what assemblies to load. MBSubModuleBaseListWrapper will check the SubModules property for the SubModules and proxy any game call to them. Dont forget to include the new SubModule in SubModule.xml! <SubModule> <Name value=\"Dynamic SubModule Loader\" /> <DLLName value=\"Module.dll\" /> <SubModuleClassType value=\"Module.DynamicSubModuleLoader\" /> <Tags/> </SubModule> public sealed class DynamicSubModuleLoader : MBSubModuleBaseListWrapper { protected override void OnSubModuleLoad() { // Add any MBSubModuleBase instance that should be handled. SubModules.AddRange(...); base.OnSubModuleLoad(); } } See ImplementationLoaderSubModule for an example."
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "| ButterLib Documentation",
    "keywords": ""
  },
  "index.html": {
    "href": "index.html",
    "title": "Bannerlord.ButterLib | ButterLib Documentation",
    "keywords": "Bannerlord.ButterLib Extension library for Mount & Blade II: Bannerlord. Highlighted features: DelayedSubModule - Execute code after specific SubModule method. DistanceMatrix - Developer tools to calculate and use distances between different objects in the game. HotKeys - Event based wrapper around game's HotKey management. MBSubModuleBaseEx - Additional control over crucial parts of game and campaign loading or unloading. SaveSystem - Provides helper methods for the game's save system. SubModuleWrappers - Wraps MBSubModulebase for easier calling of protected internal metods. DependencyInjection - Tools to work with ButterLib subsystems and services. Logging - Access to Serilog logging through ILogger Interface. Check the /Articles section in the documentation to see all available features! Outdated features: AssemblyVerifier - Basic assembly compatibility checks. CampaignIdentifier - Associates unique string ID with every campaign based on the initial character. Installation Players This module should be one of the highest in loading order. Ideally, it should be second in load order after Bannerlord.Harmony. Developers Add this to your .csproj. Please note that IncludeAssets=\"compile\" is very important! <ItemGroup> <PackageReference Include=\"Bannerlord.ButterLib\" Version=\"1.0.31\" IncludeAssets=\"compile\" /> </ItemGroup> For Players This mod is a dependency mod that does not provide anything by itself. You need to additionaly install mods that use it."
  }
}