using Bannerlord.BUTR.Shared.Helpers;

using BUTR.CrashReport;
using BUTR.CrashReport.Bannerlord;

using HarmonyLib.BUTR.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Bannerlord.ButterLib.ExceptionHandler;

internal class CrashReportHelper : ICrashReportHelper
{
    public IEnumerable<StacktraceEntry> Filter(ICollection<StacktraceEntry> stacktraceEntries)
    {
        if (stacktraceEntries.Count == 1 && stacktraceEntries.First().ModuleInfo?.Id == "Bannerlord.Harmony")
            yield break;

        foreach (var stacktraceEntry in stacktraceEntries)
        {
            if (stacktraceEntry.ModuleInfo?.Id == "Bannerlord.ButterLib")
            {
                if (stacktraceEntry.Method == BEWPatch.FinalizerMethod)
                {
                    continue;
                }
            }
            if (stacktraceEntry.ModuleInfo?.Id is "BetterExceptionWindow")
            {
                if (stacktraceEntry.Method is { Name: "Finalizer", DeclaringType: { Namespace: "AutoGeneratedExceptionFilter" } })
                {
                    continue;
                }
            }

            if (stacktraceEntry.ModuleInfo?.Id == "Bannerlord.MBOptionScreen")
            {
                if (stacktraceEntry.Method.Name == "ExecuteCommandPatch")
                {
                    continue;
                }
            }

            if (IsOfficialModule(stacktraceEntry.ModuleInfo) || IsOfficialMethod(stacktraceEntry.Method))
            {
                stacktraceEntry.CSharpInstructions = Array.Empty<string>();
                stacktraceEntry.CSharpILMixedInstructions = Array.Empty<string>();
            }
            if (IsOfficialModule(stacktraceEntry.OriginalMethod?.ModuleInfo) || IsOfficialMethod(stacktraceEntry.OriginalMethod?.Method))
            {
                stacktraceEntry.OriginalMethod!.CSharpInstructions = Array.Empty<string>();
                stacktraceEntry.OriginalMethod.CSharpILMixedInstructions = Array.Empty<string>();
            }

            yield return stacktraceEntry;
        }
    }

    public IEnumerable<IModuleInfo> GetLoadedModules() => ModuleInfoHelper.GetLoadedModules().Select(x => new ModuleInfo(x));

    public IModuleInfo? GetModuleByType(Type? type) => ModuleInfoHelper.GetModuleByType(type) is { } moduleInfo ? new ModuleInfo(moduleInfo) : null;


    public IEnumerable<Assembly> Assemblies() => AccessTools2.AllAssemblies();

    private static bool IsOfficialModule(IModuleInfo? moduleInfo) => moduleInfo is ModuleInfo { InternalModuleInfo.IsOfficial: true };
    private static bool IsOfficialMethod(MethodBase? method)
    {
        if (method?.Module.Assembly is not { } assembly)
            return false;

        if (assembly.GetCustomAttribute<AssemblyConfigurationAttribute>() is { } assemblyConfiguration)
        {
            return string.Equals(assemblyConfiguration.Configuration, "Shipping_Client", StringComparison.OrdinalIgnoreCase);
        }

        var assemblyName = assembly.GetName();
        return assemblyName.Name.Contains("TaleWorlds");
    }
}