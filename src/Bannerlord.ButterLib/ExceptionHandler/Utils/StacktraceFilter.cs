using BUTR.CrashReport.Interfaces;
using BUTR.CrashReport.Models;

using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Bannerlord.ButterLib.ExceptionHandler.Utils;

internal class StacktraceFilter : IStacktraceFilter
{
    private readonly MethodInfo? _bewFinalizer;
    public StacktraceFilter(MethodInfo? bewFinalizer)
    {
        _bewFinalizer = bewFinalizer;
    }

    public IEnumerable<StacktraceEntry> Filter(ICollection<StacktraceEntry> stacktraceEntries)
    {
        if (stacktraceEntries.Count == 1 && stacktraceEntries.First().ModuleInfo?.Id == "Bannerlord.Harmony")
            yield break;

        foreach (var stacktraceEntry in stacktraceEntries)
        {
            if (stacktraceEntry.ModuleInfo?.Id == "Bannerlord.ButterLib")
            {
                if (stacktraceEntry.Method == _bewFinalizer)
                {
                    continue;
                }

                if (stacktraceEntry.Method.DeclaringType == typeof(SubModuleWrappers2.MBSubModuleBaseWrapper))
                {
                    continue;
                }
                if (stacktraceEntry.Method.DeclaringType == typeof(SubModuleWrappers2.MBSubModuleBaseListWrapper))
                {
                    continue;
                }
                if (stacktraceEntry.Method.DeclaringType == typeof(SubModuleWrappers2.Patches.MBSubModuleBasePatch))
                {
                    continue;
                }
            }
            if (stacktraceEntry.ModuleInfo?.Id is "BetterExceptionWindow")
            {
                if (stacktraceEntry.Method is { Name: "Finalizer", DeclaringType: { Namespace: "AutoGeneratedExceptionFilter" } })
                {
                    continue;
                }
            }

            if (stacktraceEntry.ModuleInfo?.Id == "Bannerlord.MBOptionScreen")
            {
                if (stacktraceEntry.Method.Name == "ExecuteCommandPatch")
                {
                    continue;
                }
            }

            yield return stacktraceEntry with
            {
                PatchMethods = FilterPatches(stacktraceEntry.PatchMethods).ToArray(),
            };
        }
    }

    private IEnumerable<MethodEntry> FilterPatches(ICollection<MethodEntry> patches)
    {
        foreach (var patch in patches)
        {
            if (patch.Method == _bewFinalizer)
            {
                continue;
            }
            if (patch.Method is { Name: "Finalizer", DeclaringType: { Namespace: "AutoGeneratedExceptionFilter" } })
            {
                continue;
            }
            if (patch.Method.DeclaringType == typeof(SubModuleWrappers2.MBSubModuleBaseWrapper))
            {
                continue;
            }
            if (patch.Method.DeclaringType == typeof(SubModuleWrappers2.MBSubModuleBaseListWrapper))
            {
                continue;
            }
            if (patch.Method.DeclaringType == typeof(SubModuleWrappers2.Patches.MBSubModuleBasePatch))
            {
                continue;
            }

            if (patch.LoaderPluginInfo?.Id == "BLSE.ExceptionInterceptor")
            {
                continue;
            }

            if (patch.ModuleInfo?.Id == "Bannerlord.Harmony")
            {
                if (patch.Method.DeclaringType?.FullName == "Bannerlord.Harmony.SubModule")
                {
                    if (patch.Method.Name == "OnBeforeInitialModuleScreenSetAsRootPostfix")
                    {
                        continue;
                    }
                }
            }

            yield return patch;
        }
    }
}